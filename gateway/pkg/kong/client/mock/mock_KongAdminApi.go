// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// // Code generated by mockery v2.53.4. DO NOT EDIT.
package mock

//
//import (
//	context "context"
//
//	mock "github.com/stretchr/testify/mock"
//	kong "github.com/telekom/controlplane/gateway/pkg/kong/api"
//)
//
//// MockKongAdminApi is an autogenerated mock type for the KongAdminApi type
//type MockKongAdminApi struct {
//	mock.Mock
//}
//
//type MockKongAdminApi_Expecter struct {
//	mock *mock.Mock
//}
//
//func (_m *MockKongAdminApi) EXPECT() *MockKongAdminApi_Expecter {
//	return &MockKongAdminApi_Expecter{mock: &_m.Mock}
//}
//
//// AddConsumerToGroupWithResponse provides a mock function with given fields: ctx, consumerNameOrId, body, reqEditors
//func (_m *MockKongAdminApi) AddConsumerToGroupWithResponse(ctx context.Context, consumerNameOrId string, body kong.ConsumerGroupRequest, reqEditors ...kong.RequestEditorFn) (*kong.AddConsumerToGroupResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, consumerNameOrId, body)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for AddConsumerToGroupWithResponse")
//	}
//
//	var r0 *kong.AddConsumerToGroupResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.ConsumerGroupRequest, ...kong.RequestEditorFn) (*kong.AddConsumerToGroupResponse, error)); ok {
//		return rf(ctx, consumerNameOrId, body, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.ConsumerGroupRequest, ...kong.RequestEditorFn) *kong.AddConsumerToGroupResponse); ok {
//		r0 = rf(ctx, consumerNameOrId, body, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.AddConsumerToGroupResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, kong.ConsumerGroupRequest, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, consumerNameOrId, body, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_AddConsumerToGroupWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddConsumerToGroupWithResponse'
//type MockKongAdminApi_AddConsumerToGroupWithResponse_Call struct {
//	*mock.Call
//}
//
//// AddConsumerToGroupWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - consumerNameOrId string
////   - body kong.ConsumerGroupRequest
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) AddConsumerToGroupWithResponse(ctx interface{}, consumerNameOrId interface{}, body interface{}, reqEditors ...interface{}) *MockKongAdminApi_AddConsumerToGroupWithResponse_Call {
//	return &MockKongAdminApi_AddConsumerToGroupWithResponse_Call{Call: _e.mock.On("AddConsumerToGroupWithResponse",
//		append([]interface{}{ctx, consumerNameOrId, body}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_AddConsumerToGroupWithResponse_Call) Run(run func(ctx context.Context, consumerNameOrId string, body kong.ConsumerGroupRequest, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_AddConsumerToGroupWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(kong.ConsumerGroupRequest), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_AddConsumerToGroupWithResponse_Call) Return(_a0 *kong.AddConsumerToGroupResponse, _a1 error) *MockKongAdminApi_AddConsumerToGroupWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_AddConsumerToGroupWithResponse_Call) RunAndReturn(run func(context.Context, string, kong.ConsumerGroupRequest, ...kong.RequestEditorFn) (*kong.AddConsumerToGroupResponse, error)) *MockKongAdminApi_AddConsumerToGroupWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// CreateTargetForUpstreamWithResponse provides a mock function with given fields: ctx, upstreamIdOrName, body, reqEditors
//func (_m *MockKongAdminApi) CreateTargetForUpstreamWithResponse(ctx context.Context, upstreamIdOrName string, body kong.CreateTargetForUpstreamRequest, reqEditors ...kong.RequestEditorFn) (*kong.CreateTargetForUpstreamResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, upstreamIdOrName, body)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for CreateTargetForUpstreamWithResponse")
//	}
//
//	var r0 *kong.CreateTargetForUpstreamResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateTargetForUpstreamRequest, ...kong.RequestEditorFn) (*kong.CreateTargetForUpstreamResponse, error)); ok {
//		return rf(ctx, upstreamIdOrName, body, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateTargetForUpstreamRequest, ...kong.RequestEditorFn) *kong.CreateTargetForUpstreamResponse); ok {
//		r0 = rf(ctx, upstreamIdOrName, body, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.CreateTargetForUpstreamResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, kong.CreateTargetForUpstreamRequest, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, upstreamIdOrName, body, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTargetForUpstreamWithResponse'
//type MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call struct {
//	*mock.Call
//}
//
//// CreateTargetForUpstreamWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - upstreamIdOrName string
////   - body kong.CreateTargetForUpstreamRequest
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) CreateTargetForUpstreamWithResponse(ctx interface{}, upstreamIdOrName interface{}, body interface{}, reqEditors ...interface{}) *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call {
//	return &MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call{Call: _e.mock.On("CreateTargetForUpstreamWithResponse",
//		append([]interface{}{ctx, upstreamIdOrName, body}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call) Run(run func(ctx context.Context, upstreamIdOrName string, body kong.CreateTargetForUpstreamRequest, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(kong.CreateTargetForUpstreamRequest), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call) Return(_a0 *kong.CreateTargetForUpstreamResponse, _a1 error) *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call) RunAndReturn(run func(context.Context, string, kong.CreateTargetForUpstreamRequest, ...kong.RequestEditorFn) (*kong.CreateTargetForUpstreamResponse, error)) *MockKongAdminApi_CreateTargetForUpstreamWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// DeleteConsumerWithResponse provides a mock function with given fields: ctx, consumerUsernameOrId, reqEditors
//func (_m *MockKongAdminApi) DeleteConsumerWithResponse(ctx context.Context, consumerUsernameOrId string, reqEditors ...kong.RequestEditorFn) (*kong.DeleteConsumerResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, consumerUsernameOrId)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for DeleteConsumerWithResponse")
//	}
//
//	var r0 *kong.DeleteConsumerResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteConsumerResponse, error)); ok {
//		return rf(ctx, consumerUsernameOrId, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.DeleteConsumerResponse); ok {
//		r0 = rf(ctx, consumerUsernameOrId, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.DeleteConsumerResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, consumerUsernameOrId, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_DeleteConsumerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteConsumerWithResponse'
//type MockKongAdminApi_DeleteConsumerWithResponse_Call struct {
//	*mock.Call
//}
//
//// DeleteConsumerWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - consumerUsernameOrId string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) DeleteConsumerWithResponse(ctx interface{}, consumerUsernameOrId interface{}, reqEditors ...interface{}) *MockKongAdminApi_DeleteConsumerWithResponse_Call {
//	return &MockKongAdminApi_DeleteConsumerWithResponse_Call{Call: _e.mock.On("DeleteConsumerWithResponse",
//		append([]interface{}{ctx, consumerUsernameOrId}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_DeleteConsumerWithResponse_Call) Run(run func(ctx context.Context, consumerUsernameOrId string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_DeleteConsumerWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteConsumerWithResponse_Call) Return(_a0 *kong.DeleteConsumerResponse, _a1 error) *MockKongAdminApi_DeleteConsumerWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteConsumerWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteConsumerResponse, error)) *MockKongAdminApi_DeleteConsumerWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// DeletePluginWithResponse provides a mock function with given fields: ctx, pluginId, reqEditors
//func (_m *MockKongAdminApi) DeletePluginWithResponse(ctx context.Context, pluginId string, reqEditors ...kong.RequestEditorFn) (*kong.DeletePluginResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, pluginId)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for DeletePluginWithResponse")
//	}
//
//	var r0 *kong.DeletePluginResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeletePluginResponse, error)); ok {
//		return rf(ctx, pluginId, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.DeletePluginResponse); ok {
//		r0 = rf(ctx, pluginId, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.DeletePluginResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, pluginId, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_DeletePluginWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePluginWithResponse'
//type MockKongAdminApi_DeletePluginWithResponse_Call struct {
//	*mock.Call
//}
//
//// DeletePluginWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - pluginId string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) DeletePluginWithResponse(ctx interface{}, pluginId interface{}, reqEditors ...interface{}) *MockKongAdminApi_DeletePluginWithResponse_Call {
//	return &MockKongAdminApi_DeletePluginWithResponse_Call{Call: _e.mock.On("DeletePluginWithResponse",
//		append([]interface{}{ctx, pluginId}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_DeletePluginWithResponse_Call) Run(run func(ctx context.Context, pluginId string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_DeletePluginWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeletePluginWithResponse_Call) Return(_a0 *kong.DeletePluginResponse, _a1 error) *MockKongAdminApi_DeletePluginWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeletePluginWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeletePluginResponse, error)) *MockKongAdminApi_DeletePluginWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// DeleteRouteWithResponse provides a mock function with given fields: ctx, routeIdOrName, reqEditors
//func (_m *MockKongAdminApi) DeleteRouteWithResponse(ctx context.Context, routeIdOrName string, reqEditors ...kong.RequestEditorFn) (*kong.DeleteRouteResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, routeIdOrName)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for DeleteRouteWithResponse")
//	}
//
//	var r0 *kong.DeleteRouteResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteRouteResponse, error)); ok {
//		return rf(ctx, routeIdOrName, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.DeleteRouteResponse); ok {
//		r0 = rf(ctx, routeIdOrName, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.DeleteRouteResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, routeIdOrName, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_DeleteRouteWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRouteWithResponse'
//type MockKongAdminApi_DeleteRouteWithResponse_Call struct {
//	*mock.Call
//}
//
//// DeleteRouteWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - routeIdOrName string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) DeleteRouteWithResponse(ctx interface{}, routeIdOrName interface{}, reqEditors ...interface{}) *MockKongAdminApi_DeleteRouteWithResponse_Call {
//	return &MockKongAdminApi_DeleteRouteWithResponse_Call{Call: _e.mock.On("DeleteRouteWithResponse",
//		append([]interface{}{ctx, routeIdOrName}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_DeleteRouteWithResponse_Call) Run(run func(ctx context.Context, routeIdOrName string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_DeleteRouteWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteRouteWithResponse_Call) Return(_a0 *kong.DeleteRouteResponse, _a1 error) *MockKongAdminApi_DeleteRouteWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteRouteWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteRouteResponse, error)) *MockKongAdminApi_DeleteRouteWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// DeleteServiceWithResponse provides a mock function with given fields: ctx, serviceIdOrName, reqEditors
//func (_m *MockKongAdminApi) DeleteServiceWithResponse(ctx context.Context, serviceIdOrName string, reqEditors ...kong.RequestEditorFn) (*kong.DeleteServiceResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, serviceIdOrName)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for DeleteServiceWithResponse")
//	}
//
//	var r0 *kong.DeleteServiceResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteServiceResponse, error)); ok {
//		return rf(ctx, serviceIdOrName, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.DeleteServiceResponse); ok {
//		r0 = rf(ctx, serviceIdOrName, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.DeleteServiceResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, serviceIdOrName, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_DeleteServiceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceWithResponse'
//type MockKongAdminApi_DeleteServiceWithResponse_Call struct {
//	*mock.Call
//}
//
//// DeleteServiceWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - serviceIdOrName string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) DeleteServiceWithResponse(ctx interface{}, serviceIdOrName interface{}, reqEditors ...interface{}) *MockKongAdminApi_DeleteServiceWithResponse_Call {
//	return &MockKongAdminApi_DeleteServiceWithResponse_Call{Call: _e.mock.On("DeleteServiceWithResponse",
//		append([]interface{}{ctx, serviceIdOrName}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_DeleteServiceWithResponse_Call) Run(run func(ctx context.Context, serviceIdOrName string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_DeleteServiceWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteServiceWithResponse_Call) Return(_a0 *kong.DeleteServiceResponse, _a1 error) *MockKongAdminApi_DeleteServiceWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteServiceWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteServiceResponse, error)) *MockKongAdminApi_DeleteServiceWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// DeleteUpstreamTargetWithResponse provides a mock function with given fields: ctx, upstreamIdOrName, targetIdOrTarget, reqEditors
//func (_m *MockKongAdminApi) DeleteUpstreamTargetWithResponse(ctx context.Context, upstreamIdOrName string, targetIdOrTarget string, reqEditors ...kong.RequestEditorFn) (*kong.DeleteUpstreamTargetResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, upstreamIdOrName, targetIdOrTarget)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for DeleteUpstreamTargetWithResponse")
//	}
//
//	var r0 *kong.DeleteUpstreamTargetResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...kong.RequestEditorFn) (*kong.DeleteUpstreamTargetResponse, error)); ok {
//		return rf(ctx, upstreamIdOrName, targetIdOrTarget, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...kong.RequestEditorFn) *kong.DeleteUpstreamTargetResponse); ok {
//		r0 = rf(ctx, upstreamIdOrName, targetIdOrTarget, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.DeleteUpstreamTargetResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, upstreamIdOrName, targetIdOrTarget, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpstreamTargetWithResponse'
//type MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call struct {
//	*mock.Call
//}
//
//// DeleteUpstreamTargetWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - upstreamIdOrName string
////   - targetIdOrTarget string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) DeleteUpstreamTargetWithResponse(ctx interface{}, upstreamIdOrName interface{}, targetIdOrTarget interface{}, reqEditors ...interface{}) *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call {
//	return &MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call{Call: _e.mock.On("DeleteUpstreamTargetWithResponse",
//		append([]interface{}{ctx, upstreamIdOrName, targetIdOrTarget}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call) Run(run func(ctx context.Context, upstreamIdOrName string, targetIdOrTarget string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call) Return(_a0 *kong.DeleteUpstreamTargetResponse, _a1 error) *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call) RunAndReturn(run func(context.Context, string, string, ...kong.RequestEditorFn) (*kong.DeleteUpstreamTargetResponse, error)) *MockKongAdminApi_DeleteUpstreamTargetWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// DeleteUpstreamWithResponse provides a mock function with given fields: ctx, upstreamIdOrName, reqEditors
//func (_m *MockKongAdminApi) DeleteUpstreamWithResponse(ctx context.Context, upstreamIdOrName string, reqEditors ...kong.RequestEditorFn) (*kong.DeleteUpstreamResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, upstreamIdOrName)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for DeleteUpstreamWithResponse")
//	}
//
//	var r0 *kong.DeleteUpstreamResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteUpstreamResponse, error)); ok {
//		return rf(ctx, upstreamIdOrName, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.DeleteUpstreamResponse); ok {
//		r0 = rf(ctx, upstreamIdOrName, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.DeleteUpstreamResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, upstreamIdOrName, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_DeleteUpstreamWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUpstreamWithResponse'
//type MockKongAdminApi_DeleteUpstreamWithResponse_Call struct {
//	*mock.Call
//}
//
//// DeleteUpstreamWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - upstreamIdOrName string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) DeleteUpstreamWithResponse(ctx interface{}, upstreamIdOrName interface{}, reqEditors ...interface{}) *MockKongAdminApi_DeleteUpstreamWithResponse_Call {
//	return &MockKongAdminApi_DeleteUpstreamWithResponse_Call{Call: _e.mock.On("DeleteUpstreamWithResponse",
//		append([]interface{}{ctx, upstreamIdOrName}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_DeleteUpstreamWithResponse_Call) Run(run func(ctx context.Context, upstreamIdOrName string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_DeleteUpstreamWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteUpstreamWithResponse_Call) Return(_a0 *kong.DeleteUpstreamResponse, _a1 error) *MockKongAdminApi_DeleteUpstreamWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_DeleteUpstreamWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.DeleteUpstreamResponse, error)) *MockKongAdminApi_DeleteUpstreamWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// GetPluginWithResponse provides a mock function with given fields: ctx, pluginId, reqEditors
//func (_m *MockKongAdminApi) GetPluginWithResponse(ctx context.Context, pluginId string, reqEditors ...kong.RequestEditorFn) (*kong.GetPluginResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, pluginId)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for GetPluginWithResponse")
//	}
//
//	var r0 *kong.GetPluginResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.GetPluginResponse, error)); ok {
//		return rf(ctx, pluginId, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.GetPluginResponse); ok {
//		r0 = rf(ctx, pluginId, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.GetPluginResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, pluginId, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_GetPluginWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPluginWithResponse'
//type MockKongAdminApi_GetPluginWithResponse_Call struct {
//	*mock.Call
//}
//
//// GetPluginWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - pluginId string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) GetPluginWithResponse(ctx interface{}, pluginId interface{}, reqEditors ...interface{}) *MockKongAdminApi_GetPluginWithResponse_Call {
//	return &MockKongAdminApi_GetPluginWithResponse_Call{Call: _e.mock.On("GetPluginWithResponse",
//		append([]interface{}{ctx, pluginId}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_GetPluginWithResponse_Call) Run(run func(ctx context.Context, pluginId string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_GetPluginWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_GetPluginWithResponse_Call) Return(_a0 *kong.GetPluginResponse, _a1 error) *MockKongAdminApi_GetPluginWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_GetPluginWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.GetPluginResponse, error)) *MockKongAdminApi_GetPluginWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// ListPluginWithResponse provides a mock function with given fields: ctx, params, reqEditors
//func (_m *MockKongAdminApi) ListPluginWithResponse(ctx context.Context, params *kong.ListPluginParams, reqEditors ...kong.RequestEditorFn) (*kong.ListPluginResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, params)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for ListPluginWithResponse")
//	}
//
//	var r0 *kong.ListPluginResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, *kong.ListPluginParams, ...kong.RequestEditorFn) (*kong.ListPluginResponse, error)); ok {
//		return rf(ctx, params, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, *kong.ListPluginParams, ...kong.RequestEditorFn) *kong.ListPluginResponse); ok {
//		r0 = rf(ctx, params, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.ListPluginResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, *kong.ListPluginParams, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, params, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_ListPluginWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPluginWithResponse'
//type MockKongAdminApi_ListPluginWithResponse_Call struct {
//	*mock.Call
//}
//
//// ListPluginWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - params *kong.ListPluginParams
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) ListPluginWithResponse(ctx interface{}, params interface{}, reqEditors ...interface{}) *MockKongAdminApi_ListPluginWithResponse_Call {
//	return &MockKongAdminApi_ListPluginWithResponse_Call{Call: _e.mock.On("ListPluginWithResponse",
//		append([]interface{}{ctx, params}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_ListPluginWithResponse_Call) Run(run func(ctx context.Context, params *kong.ListPluginParams, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_ListPluginWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(*kong.ListPluginParams), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_ListPluginWithResponse_Call) Return(_a0 *kong.ListPluginResponse, _a1 error) *MockKongAdminApi_ListPluginWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_ListPluginWithResponse_Call) RunAndReturn(run func(context.Context, *kong.ListPluginParams, ...kong.RequestEditorFn) (*kong.ListPluginResponse, error)) *MockKongAdminApi_ListPluginWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// UpsertConsumerWithResponse provides a mock function with given fields: ctx, consumerUsernameOrId, body, reqEditors
//func (_m *MockKongAdminApi) UpsertConsumerWithResponse(ctx context.Context, consumerUsernameOrId string, body kong.CreateConsumerRequest, reqEditors ...kong.RequestEditorFn) (*kong.UpsertConsumerResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, consumerUsernameOrId, body)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for UpsertConsumerWithResponse")
//	}
//
//	var r0 *kong.UpsertConsumerResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateConsumerRequest, ...kong.RequestEditorFn) (*kong.UpsertConsumerResponse, error)); ok {
//		return rf(ctx, consumerUsernameOrId, body, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateConsumerRequest, ...kong.RequestEditorFn) *kong.UpsertConsumerResponse); ok {
//		r0 = rf(ctx, consumerUsernameOrId, body, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.UpsertConsumerResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, kong.CreateConsumerRequest, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, consumerUsernameOrId, body, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_UpsertConsumerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertConsumerWithResponse'
//type MockKongAdminApi_UpsertConsumerWithResponse_Call struct {
//	*mock.Call
//}
//
//// UpsertConsumerWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - consumerUsernameOrId string
////   - body kong.CreateConsumerRequest
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) UpsertConsumerWithResponse(ctx interface{}, consumerUsernameOrId interface{}, body interface{}, reqEditors ...interface{}) *MockKongAdminApi_UpsertConsumerWithResponse_Call {
//	return &MockKongAdminApi_UpsertConsumerWithResponse_Call{Call: _e.mock.On("UpsertConsumerWithResponse",
//		append([]interface{}{ctx, consumerUsernameOrId, body}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_UpsertConsumerWithResponse_Call) Run(run func(ctx context.Context, consumerUsernameOrId string, body kong.CreateConsumerRequest, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_UpsertConsumerWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(kong.CreateConsumerRequest), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertConsumerWithResponse_Call) Return(_a0 *kong.UpsertConsumerResponse, _a1 error) *MockKongAdminApi_UpsertConsumerWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertConsumerWithResponse_Call) RunAndReturn(run func(context.Context, string, kong.CreateConsumerRequest, ...kong.RequestEditorFn) (*kong.UpsertConsumerResponse, error)) *MockKongAdminApi_UpsertConsumerWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// UpsertRouteWithResponse provides a mock function with given fields: ctx, routeIdOrName, body, reqEditors
//func (_m *MockKongAdminApi) UpsertRouteWithResponse(ctx context.Context, routeIdOrName string, body kong.CreateRouteRequest, reqEditors ...kong.RequestEditorFn) (*kong.UpsertRouteResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, routeIdOrName, body)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for UpsertRouteWithResponse")
//	}
//
//	var r0 *kong.UpsertRouteResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateRouteRequest, ...kong.RequestEditorFn) (*kong.UpsertRouteResponse, error)); ok {
//		return rf(ctx, routeIdOrName, body, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateRouteRequest, ...kong.RequestEditorFn) *kong.UpsertRouteResponse); ok {
//		r0 = rf(ctx, routeIdOrName, body, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.UpsertRouteResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, kong.CreateRouteRequest, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, routeIdOrName, body, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_UpsertRouteWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertRouteWithResponse'
//type MockKongAdminApi_UpsertRouteWithResponse_Call struct {
//	*mock.Call
//}
//
//// UpsertRouteWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - routeIdOrName string
////   - body kong.CreateRouteRequest
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) UpsertRouteWithResponse(ctx interface{}, routeIdOrName interface{}, body interface{}, reqEditors ...interface{}) *MockKongAdminApi_UpsertRouteWithResponse_Call {
//	return &MockKongAdminApi_UpsertRouteWithResponse_Call{Call: _e.mock.On("UpsertRouteWithResponse",
//		append([]interface{}{ctx, routeIdOrName, body}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_UpsertRouteWithResponse_Call) Run(run func(ctx context.Context, routeIdOrName string, body kong.CreateRouteRequest, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_UpsertRouteWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(kong.CreateRouteRequest), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertRouteWithResponse_Call) Return(_a0 *kong.UpsertRouteResponse, _a1 error) *MockKongAdminApi_UpsertRouteWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertRouteWithResponse_Call) RunAndReturn(run func(context.Context, string, kong.CreateRouteRequest, ...kong.RequestEditorFn) (*kong.UpsertRouteResponse, error)) *MockKongAdminApi_UpsertRouteWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// UpsertServiceWithResponse provides a mock function with given fields: ctx, serviceIdOrName, body, reqEditors
//func (_m *MockKongAdminApi) UpsertServiceWithResponse(ctx context.Context, serviceIdOrName string, body kong.CreateServiceRequest, reqEditors ...kong.RequestEditorFn) (*kong.UpsertServiceResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, serviceIdOrName, body)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for UpsertServiceWithResponse")
//	}
//
//	var r0 *kong.UpsertServiceResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateServiceRequest, ...kong.RequestEditorFn) (*kong.UpsertServiceResponse, error)); ok {
//		return rf(ctx, serviceIdOrName, body, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateServiceRequest, ...kong.RequestEditorFn) *kong.UpsertServiceResponse); ok {
//		r0 = rf(ctx, serviceIdOrName, body, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.UpsertServiceResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, kong.CreateServiceRequest, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, serviceIdOrName, body, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_UpsertServiceWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertServiceWithResponse'
//type MockKongAdminApi_UpsertServiceWithResponse_Call struct {
//	*mock.Call
//}
//
//// UpsertServiceWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - serviceIdOrName string
////   - body kong.CreateServiceRequest
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) UpsertServiceWithResponse(ctx interface{}, serviceIdOrName interface{}, body interface{}, reqEditors ...interface{}) *MockKongAdminApi_UpsertServiceWithResponse_Call {
//	return &MockKongAdminApi_UpsertServiceWithResponse_Call{Call: _e.mock.On("UpsertServiceWithResponse",
//		append([]interface{}{ctx, serviceIdOrName, body}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_UpsertServiceWithResponse_Call) Run(run func(ctx context.Context, serviceIdOrName string, body kong.CreateServiceRequest, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_UpsertServiceWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(kong.CreateServiceRequest), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertServiceWithResponse_Call) Return(_a0 *kong.UpsertServiceResponse, _a1 error) *MockKongAdminApi_UpsertServiceWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertServiceWithResponse_Call) RunAndReturn(run func(context.Context, string, kong.CreateServiceRequest, ...kong.RequestEditorFn) (*kong.UpsertServiceResponse, error)) *MockKongAdminApi_UpsertServiceWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// UpsertUpstreamWithResponse provides a mock function with given fields: ctx, upstreamIdOrName, body, reqEditors
//func (_m *MockKongAdminApi) UpsertUpstreamWithResponse(ctx context.Context, upstreamIdOrName string, body kong.CreateUpstreamRequest, reqEditors ...kong.RequestEditorFn) (*kong.UpsertUpstreamResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, upstreamIdOrName, body)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for UpsertUpstreamWithResponse")
//	}
//
//	var r0 *kong.UpsertUpstreamResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateUpstreamRequest, ...kong.RequestEditorFn) (*kong.UpsertUpstreamResponse, error)); ok {
//		return rf(ctx, upstreamIdOrName, body, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, kong.CreateUpstreamRequest, ...kong.RequestEditorFn) *kong.UpsertUpstreamResponse); ok {
//		r0 = rf(ctx, upstreamIdOrName, body, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.UpsertUpstreamResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, kong.CreateUpstreamRequest, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, upstreamIdOrName, body, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_UpsertUpstreamWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertUpstreamWithResponse'
//type MockKongAdminApi_UpsertUpstreamWithResponse_Call struct {
//	*mock.Call
//}
//
//// UpsertUpstreamWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - upstreamIdOrName string
////   - body kong.CreateUpstreamRequest
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) UpsertUpstreamWithResponse(ctx interface{}, upstreamIdOrName interface{}, body interface{}, reqEditors ...interface{}) *MockKongAdminApi_UpsertUpstreamWithResponse_Call {
//	return &MockKongAdminApi_UpsertUpstreamWithResponse_Call{Call: _e.mock.On("UpsertUpstreamWithResponse",
//		append([]interface{}{ctx, upstreamIdOrName, body}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_UpsertUpstreamWithResponse_Call) Run(run func(ctx context.Context, upstreamIdOrName string, body kong.CreateUpstreamRequest, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_UpsertUpstreamWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-3)
//		for i, a := range args[3:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), args[2].(kong.CreateUpstreamRequest), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertUpstreamWithResponse_Call) Return(_a0 *kong.UpsertUpstreamResponse, _a1 error) *MockKongAdminApi_UpsertUpstreamWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_UpsertUpstreamWithResponse_Call) RunAndReturn(run func(context.Context, string, kong.CreateUpstreamRequest, ...kong.RequestEditorFn) (*kong.UpsertUpstreamResponse, error)) *MockKongAdminApi_UpsertUpstreamWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// ViewGroupConsumerWithResponse provides a mock function with given fields: ctx, consumerNameOrId, reqEditors
//func (_m *MockKongAdminApi) ViewGroupConsumerWithResponse(ctx context.Context, consumerNameOrId string, reqEditors ...kong.RequestEditorFn) (*kong.ViewGroupConsumerResponse, error) {
//	_va := make([]interface{}, len(reqEditors))
//	for _i := range reqEditors {
//		_va[_i] = reqEditors[_i]
//	}
//	var _ca []interface{}
//	_ca = append(_ca, ctx, consumerNameOrId)
//	_ca = append(_ca, _va...)
//	ret := _m.Called(_ca...)
//
//	if len(ret) == 0 {
//		panic("no return value specified for ViewGroupConsumerWithResponse")
//	}
//
//	var r0 *kong.ViewGroupConsumerResponse
//	var r1 error
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) (*kong.ViewGroupConsumerResponse, error)); ok {
//		return rf(ctx, consumerNameOrId, reqEditors...)
//	}
//	if rf, ok := ret.Get(0).(func(context.Context, string, ...kong.RequestEditorFn) *kong.ViewGroupConsumerResponse); ok {
//		r0 = rf(ctx, consumerNameOrId, reqEditors...)
//	} else {
//		if ret.Get(0) != nil {
//			r0 = ret.Get(0).(*kong.ViewGroupConsumerResponse)
//		}
//	}
//
//	if rf, ok := ret.Get(1).(func(context.Context, string, ...kong.RequestEditorFn) error); ok {
//		r1 = rf(ctx, consumerNameOrId, reqEditors...)
//	} else {
//		r1 = ret.Error(1)
//	}
//
//	return r0, r1
//}
//
//// MockKongAdminApi_ViewGroupConsumerWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ViewGroupConsumerWithResponse'
//type MockKongAdminApi_ViewGroupConsumerWithResponse_Call struct {
//	*mock.Call
//}
//
//// ViewGroupConsumerWithResponse is a helper method to define mock.On call
////   - ctx context.Context
////   - consumerNameOrId string
////   - reqEditors ...kong.RequestEditorFn
//func (_e *MockKongAdminApi_Expecter) ViewGroupConsumerWithResponse(ctx interface{}, consumerNameOrId interface{}, reqEditors ...interface{}) *MockKongAdminApi_ViewGroupConsumerWithResponse_Call {
//	return &MockKongAdminApi_ViewGroupConsumerWithResponse_Call{Call: _e.mock.On("ViewGroupConsumerWithResponse",
//		append([]interface{}{ctx, consumerNameOrId}, reqEditors...)...)}
//}
//
//func (_c *MockKongAdminApi_ViewGroupConsumerWithResponse_Call) Run(run func(ctx context.Context, consumerNameOrId string, reqEditors ...kong.RequestEditorFn)) *MockKongAdminApi_ViewGroupConsumerWithResponse_Call {
//	_c.Call.Run(func(args mock.Arguments) {
//		variadicArgs := make([]kong.RequestEditorFn, len(args)-2)
//		for i, a := range args[2:] {
//			if a != nil {
//				variadicArgs[i] = a.(kong.RequestEditorFn)
//			}
//		}
//		run(args[0].(context.Context), args[1].(string), variadicArgs...)
//	})
//	return _c
//}
//
//func (_c *MockKongAdminApi_ViewGroupConsumerWithResponse_Call) Return(_a0 *kong.ViewGroupConsumerResponse, _a1 error) *MockKongAdminApi_ViewGroupConsumerWithResponse_Call {
//	_c.Call.Return(_a0, _a1)
//	return _c
//}
//
//func (_c *MockKongAdminApi_ViewGroupConsumerWithResponse_Call) RunAndReturn(run func(context.Context, string, ...kong.RequestEditorFn) (*kong.ViewGroupConsumerResponse, error)) *MockKongAdminApi_ViewGroupConsumerWithResponse_Call {
//	_c.Call.Return(run)
//	return _c
//}
//
//// NewMockKongAdminApi creates a new instance of MockKongAdminApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
//// The first argument is typically a *testing.T value.
//func NewMockKongAdminApi(t interface {
//	mock.TestingT
//	Cleanup(func())
//}) *MockKongAdminApi {
//	mock := &MockKongAdminApi{}
//	mock.Mock.Test(t)
//
//	t.Cleanup(func() { mock.AssertExpectations(t) })
//
//	return mock
//}
