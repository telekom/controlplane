// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteRemoteSubscription request
	DeleteRemoteSubscription(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateRemoteSubscriptionWithBody request with any body
	CreateOrUpdateRemoteSubscriptionWithBody(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateRemoteSubscription(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body CreateOrUpdateRemoteSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRemoteSubscriptionStatusWithBody request with any body
	UpdateRemoteSubscriptionStatusWithBody(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRemoteSubscriptionStatus(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body UpdateRemoteSubscriptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteRemoteSubscription(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRemoteSubscriptionRequest(c.Server, remoteSubscriptionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateRemoteSubscriptionWithBody(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateRemoteSubscriptionRequestWithBody(c.Server, remoteSubscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateRemoteSubscription(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body CreateOrUpdateRemoteSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateRemoteSubscriptionRequest(c.Server, remoteSubscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRemoteSubscriptionStatusWithBody(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRemoteSubscriptionStatusRequestWithBody(c.Server, remoteSubscriptionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRemoteSubscriptionStatus(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body UpdateRemoteSubscriptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRemoteSubscriptionStatusRequest(c.Server, remoteSubscriptionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteRemoteSubscriptionRequest generates requests for DeleteRemoteSubscription
func NewDeleteRemoteSubscriptionRequest(server string, remoteSubscriptionId RemoteSubscriptionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "remoteSubscriptionId", runtime.ParamLocationPath, remoteSubscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remoteSubscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateRemoteSubscriptionRequest calls the generic CreateOrUpdateRemoteSubscription builder with application/json body
func NewCreateOrUpdateRemoteSubscriptionRequest(server string, remoteSubscriptionId RemoteSubscriptionId, body CreateOrUpdateRemoteSubscriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateRemoteSubscriptionRequestWithBody(server, remoteSubscriptionId, "application/json", bodyReader)
}

// NewCreateOrUpdateRemoteSubscriptionRequestWithBody generates requests for CreateOrUpdateRemoteSubscription with any type of body
func NewCreateOrUpdateRemoteSubscriptionRequestWithBody(server string, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "remoteSubscriptionId", runtime.ParamLocationPath, remoteSubscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remoteSubscriptions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRemoteSubscriptionStatusRequest calls the generic UpdateRemoteSubscriptionStatus builder with application/json body
func NewUpdateRemoteSubscriptionStatusRequest(server string, remoteSubscriptionId RemoteSubscriptionId, body UpdateRemoteSubscriptionStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRemoteSubscriptionStatusRequestWithBody(server, remoteSubscriptionId, "application/json", bodyReader)
}

// NewUpdateRemoteSubscriptionStatusRequestWithBody generates requests for UpdateRemoteSubscriptionStatus with any type of body
func NewUpdateRemoteSubscriptionStatusRequestWithBody(server string, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "remoteSubscriptionId", runtime.ParamLocationPath, remoteSubscriptionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/remoteSubscriptions/%s/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteRemoteSubscriptionWithResponse request
	DeleteRemoteSubscriptionWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, reqEditors ...RequestEditorFn) (*DeleteRemoteSubscriptionResponse, error)

	// CreateOrUpdateRemoteSubscriptionWithBodyWithResponse request with any body
	CreateOrUpdateRemoteSubscriptionWithBodyWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateRemoteSubscriptionResponse, error)

	CreateOrUpdateRemoteSubscriptionWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body CreateOrUpdateRemoteSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateRemoteSubscriptionResponse, error)

	// UpdateRemoteSubscriptionStatusWithBodyWithResponse request with any body
	UpdateRemoteSubscriptionStatusWithBodyWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRemoteSubscriptionStatusResponse, error)

	UpdateRemoteSubscriptionStatusWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body UpdateRemoteSubscriptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRemoteSubscriptionStatusResponse, error)
}

type DeleteRemoteSubscriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON401 *Unauthorized
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON415 *UnsupportedMediaType
	ApplicationproblemJSON500 *ServerError
}

// Status returns HTTPResponse.Status
func (r DeleteRemoteSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRemoteSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateRemoteSubscriptionResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RemoteSubscriptionResponse
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON401 *Unauthorized
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON415 *UnsupportedMediaType
	ApplicationproblemJSON500 *ServerError
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateRemoteSubscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateRemoteSubscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRemoteSubscriptionStatusResponse struct {
	Body                      []byte
	HTTPResponse              *http.Response
	JSON200                   *RemoteSubscriptionResponse
	ApplicationproblemJSON400 *BadRequest
	ApplicationproblemJSON401 *Unauthorized
	ApplicationproblemJSON403 *Forbidden
	ApplicationproblemJSON404 *NotFound
	ApplicationproblemJSON415 *UnsupportedMediaType
	ApplicationproblemJSON500 *ServerError
}

// Status returns HTTPResponse.Status
func (r UpdateRemoteSubscriptionStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRemoteSubscriptionStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteRemoteSubscriptionWithResponse request returning *DeleteRemoteSubscriptionResponse
func (c *ClientWithResponses) DeleteRemoteSubscriptionWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, reqEditors ...RequestEditorFn) (*DeleteRemoteSubscriptionResponse, error) {
	rsp, err := c.DeleteRemoteSubscription(ctx, remoteSubscriptionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRemoteSubscriptionResponse(rsp)
}

// CreateOrUpdateRemoteSubscriptionWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateRemoteSubscriptionResponse
func (c *ClientWithResponses) CreateOrUpdateRemoteSubscriptionWithBodyWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateRemoteSubscriptionResponse, error) {
	rsp, err := c.CreateOrUpdateRemoteSubscriptionWithBody(ctx, remoteSubscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateRemoteSubscriptionResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateRemoteSubscriptionWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body CreateOrUpdateRemoteSubscriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateRemoteSubscriptionResponse, error) {
	rsp, err := c.CreateOrUpdateRemoteSubscription(ctx, remoteSubscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateRemoteSubscriptionResponse(rsp)
}

// UpdateRemoteSubscriptionStatusWithBodyWithResponse request with arbitrary body returning *UpdateRemoteSubscriptionStatusResponse
func (c *ClientWithResponses) UpdateRemoteSubscriptionStatusWithBodyWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRemoteSubscriptionStatusResponse, error) {
	rsp, err := c.UpdateRemoteSubscriptionStatusWithBody(ctx, remoteSubscriptionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRemoteSubscriptionStatusResponse(rsp)
}

func (c *ClientWithResponses) UpdateRemoteSubscriptionStatusWithResponse(ctx context.Context, remoteSubscriptionId RemoteSubscriptionId, body UpdateRemoteSubscriptionStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRemoteSubscriptionStatusResponse, error) {
	rsp, err := c.UpdateRemoteSubscriptionStatus(ctx, remoteSubscriptionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRemoteSubscriptionStatusResponse(rsp)
}

// ParseDeleteRemoteSubscriptionResponse parses an HTTP response from a DeleteRemoteSubscriptionWithResponse call
func ParseDeleteRemoteSubscriptionResponse(rsp *http.Response) (*DeleteRemoteSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRemoteSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateRemoteSubscriptionResponse parses an HTTP response from a CreateOrUpdateRemoteSubscriptionWithResponse call
func ParseCreateOrUpdateRemoteSubscriptionResponse(rsp *http.Response) (*CreateOrUpdateRemoteSubscriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateRemoteSubscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemoteSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}

// ParseUpdateRemoteSubscriptionStatusResponse parses an HTTP response from a UpdateRemoteSubscriptionStatusWithResponse call
func ParseUpdateRemoteSubscriptionStatusResponse(rsp *http.Response) (*UpdateRemoteSubscriptionStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRemoteSubscriptionStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RemoteSubscriptionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 415:
		var dest UnsupportedMediaType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON415 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.ApplicationproblemJSON500 = &dest

	}

	return response, nil
}
