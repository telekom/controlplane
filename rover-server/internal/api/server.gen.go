// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for ApiExposureInfoType.
const (
	ApiExposureInfoTypeApi ApiExposureInfoType = "api"
)

// Defines values for ApiSubscriptionInfoType.
const (
	ApiSubscriptionInfoTypeApi ApiSubscriptionInfoType = "api"
)

// Defines values for ApprovalStrategy.
const (
	AUTO     ApprovalStrategy = "AUTO"
	FOUREYES ApprovalStrategy = "FOUREYES"
	SIMPLE   ApprovalStrategy = "SIMPLE"
)

// Defines values for AuthenticationClientAuthMethod.
const (
	BASIC AuthenticationClientAuthMethod = "BASIC"
	NONE  AuthenticationClientAuthMethod = "NONE"
	POST  AuthenticationClientAuthMethod = "POST"
)

// Defines values for BasicAuthType.
const (
	BasicAuthTypeBasicAuth BasicAuthType = "basicAuth"
)

// Defines values for EventExposureInfoType.
const (
	EventExposureInfoTypeEvent EventExposureInfoType = "event"
)

// Defines values for EventSubscriptionInfoType.
const (
	EventSubscriptionInfoTypeEvent EventSubscriptionInfoType = "event"
)

// Defines values for EventTriggerResponseFilterMode.
const (
	Exclude EventTriggerResponseFilterMode = "exclude"
	Include EventTriggerResponseFilterMode = "include"
)

// Defines values for GrantType.
const (
	CLIENTCREDENTIALS GrantType = "CLIENT_CREDENTIALS"
	PASSWORD          GrantType = "PASSWORD"
	REFRESHTOKEN      GrantType = "REFRESH_TOKEN"
)

// Defines values for Oauth2TokenRequest.
const (
	Body   Oauth2TokenRequest = "body"
	Header Oauth2TokenRequest = "header"
)

// Defines values for Oauth2Type.
const (
	Oauth2TypeOauth2 Oauth2Type = "oauth2"
)

// Defines values for OverallStatus.
const (
	OverallStatusBlocked    OverallStatus = "blocked"
	OverallStatusComplete   OverallStatus = "complete"
	OverallStatusDone       OverallStatus = "done"
	OverallStatusFailed     OverallStatus = "failed"
	OverallStatusInvalid    OverallStatus = "invalid"
	OverallStatusNone       OverallStatus = "none"
	OverallStatusPending    OverallStatus = "pending"
	OverallStatusProcessing OverallStatus = "processing"
)

// Defines values for ProcessingState.
const (
	ProcessingStateDone       ProcessingState = "done"
	ProcessingStateFailed     ProcessingState = "failed"
	ProcessingStateNone       ProcessingState = "none"
	ProcessingStatePending    ProcessingState = "pending"
	ProcessingStateProcessing ProcessingState = "processing"
)

// Defines values for State.
const (
	Blocked  State = "blocked"
	Complete State = "complete"
	Invalid  State = "invalid"
	None     State = "none"
)

// Defines values for Visibility.
const (
	ENTERPRISE Visibility = "ENTERPRISE"
	WORLD      Visibility = "WORLD"
	ZONE       Visibility = "ZONE"
)

// Defines values for Sort.
const (
	SortName Sort = "name"
)

// Defines values for GetAllApiSpecificationsParamsSort.
const (
	GetAllApiSpecificationsParamsSortName GetAllApiSpecificationsParamsSort = "name"
)

// Defines values for GetAllEventSpecificationsParamsSort.
const (
	GetAllEventSpecificationsParamsSortName GetAllEventSpecificationsParamsSort = "name"
)

// Defines values for GetAllRoversParamsSort.
const (
	GetAllRoversParamsSortName GetAllRoversParamsSort = "name"
)

// Defines values for GetApplicationsInfoParamsSort.
const (
	Name GetApplicationsInfoParamsSort = "name"
)

// ApiExposure defines model for ApiExposure.
type ApiExposure struct {
	Approval       ApprovalStrategy   `json:"approval"`
	BasePath       string             `json:"basePath"`
	CircuitBreaker CircuitBreaker     `json:"circuitBreaker,omitempty,omitzero"`
	Failover       Failover           `json:"failover,omitempty,omitzero"`
	LoadBalancing  LoadBalancing      `json:"loadBalancing,omitempty,omitzero"`
	RateLimit      RateLimitContainer `json:"rateLimit,omitempty,omitzero"`

	// RemoveHeaders Allows you to specify a list of header names that will be removed before forwarding the request to the provider
	RemoveHeaders []string      `json:"removeHeaders,omitempty,omitzero"`
	Security      Security      `json:"security,omitempty,omitzero"`
	TrustedTeams  []TrustedTeam `json:"trustedTeams,omitempty,omitzero"`
	Type          string        `json:"type"`
	Upstream      string        `json:"upstream,omitempty,omitzero"`
	Visibility    Visibility    `json:"visibility"`
}

// ApiExposureInfo defines model for ApiExposureInfo.
type ApiExposureInfo struct {
	Approval       ApprovalStrategy   `json:"approval"`
	BasePath       string             `json:"basePath"`
	CircuitBreaker CircuitBreaker     `json:"circuitBreaker,omitempty,omitzero"`
	Failover       Failover           `json:"failover,omitempty,omitzero"`
	LoadBalancing  LoadBalancing      `json:"loadBalancing,omitempty,omitzero"`
	RateLimit      RateLimitContainer `json:"rateLimit,omitempty,omitzero"`

	// RemoveHeaders Allows you to specify a list of header names that will be removed before forwarding the request to the provider
	RemoveHeaders []string            `json:"removeHeaders,omitempty,omitzero"`
	Security      Security            `json:"security,omitempty,omitzero"`
	TrustedTeams  []TrustedTeam       `json:"trustedTeams,omitempty,omitzero"`
	Type          ApiExposureInfoType `json:"type"`
	Upstream      string              `json:"upstream,omitempty,omitzero"`
	Visibility    Visibility          `json:"visibility"`
}

// ApiExposureInfoType defines model for ApiExposureInfo.Type.
type ApiExposureInfoType string

// ApiSpecification defines model for ApiSpecification.
type ApiSpecification struct {
	// Specification A valid API-specification according to the guidelines in openapi or swagger (deprecated) format
	Specification map[string]interface{} `json:"specification"`
}

// ApiSpecificationCreateRequest defines model for ApiSpecificationCreateRequest.
type ApiSpecificationCreateRequest struct {
	// Specification A valid API-specification according to the guidelines in openapi or swagger (deprecated) format
	Specification map[string]interface{} `json:"specification"`

	// Team This field is only used for hub-scoped access to control the target team of the resource. For everything else, it can be ignored
	Team string `json:"team,omitempty,omitzero"`
}

// ApiSpecificationListResponse defines model for ApiSpecificationListResponse.
type ApiSpecificationListResponse struct {
	// UnderscoreLinks HATEOAS links for pagination
	UnderscoreLinks Links                      `json:"_links,omitempty,omitzero"`
	Items           []ApiSpecificationResponse `json:"items"`
}

// ApiSpecificationResponse defines model for ApiSpecificationResponse.
type ApiSpecificationResponse struct {
	// Category Category of this api
	Category string `json:"category"`

	// Id Unique id of this resource. Can be used to directly address this specific resource
	Id string `json:"id"`

	// Name Name of the created api (subset of id)
	Name string `json:"name"`

	// Specification A valid API-specification according to the guidelines in openapi or swagger (deprecated) format
	Specification map[string]interface{} `json:"specification"`
	Status        Status                 `json:"status,omitempty,omitzero"`

	// VendorApi Whether this api is an vendor api
	VendorApi bool `json:"vendorApi"`
}

// ApiSpecificationUpdateRequest defines model for ApiSpecificationUpdateRequest.
type ApiSpecificationUpdateRequest = ApiSpecification

// ApiSubscription defines model for ApiSubscription.
type ApiSubscription struct {
	BasePath string   `json:"basePath"`
	Failover Failover `json:"failover,omitempty,omitzero"`
	Security Security `json:"security,omitempty,omitzero"`
	Type     string   `json:"type"`
}

// ApiSubscriptionInfo defines model for ApiSubscriptionInfo.
type ApiSubscriptionInfo struct {
	BasePath      string                  `json:"basePath"`
	Failover      Failover                `json:"failover,omitempty,omitzero"`
	FailoverInfos []FailoverInfo          `json:"failoverInfos,omitempty,omitzero"`
	Security      Security                `json:"security,omitempty,omitzero"`
	Type          ApiSubscriptionInfoType `json:"type"`
}

// ApiSubscriptionInfoType defines model for ApiSubscriptionInfo.Type.
type ApiSubscriptionInfoType string

// ApplicationInfo defines model for ApplicationInfo.
type ApplicationInfo struct {
	Errors                  []Problem      `json:"errors"`
	Exposures               []ExposureInfo `json:"exposures"`
	Infos                   []Problem      `json:"infos"`
	IrisClientId            string         `json:"irisClientId"`
	IrisClientSecret        string         `json:"irisClientSecret"`
	IrisIssuerUrl           string         `json:"irisIssuerUrl"`
	IrisTokenEndpointUrl    string         `json:"irisTokenEndpointUrl"`
	Name                    string         `json:"name"`
	ObserverUrl             string         `json:"observerUrl,omitempty,omitzero"`
	StargateIssuerUrl       string         `json:"stargateIssuerUrl,omitempty,omitzero"`
	StargatePublishEventUrl string         `json:"stargatePublishEventUrl,omitempty,omitzero"`
	StargateUrl             string         `json:"stargateUrl,omitempty,omitzero"`

	// Status Status of this resource and all its relevant sub-resources
	Status        OverallStatus      `json:"status"`
	Subscriptions []SubscriptionInfo `json:"subscriptions"`
	Variables     []Data             `json:"variables"`
	Warnings      []Problem          `json:"warnings"`
	Zone          string             `json:"zone"`
}

// ApprovalStrategy defines model for ApprovalStrategy.
type ApprovalStrategy string

// Authentication defines model for Authentication.
type Authentication struct {
	ApplicationScope string `json:"applicationScope,omitempty,omitzero"`

	// ClientAuthMethod Configures client authentication method, according to RFC 6749.
	ClientAuthMethod       AuthenticationClientAuthMethod `json:"clientAuthMethod,omitempty,omitzero"`
	PostLogoutRedirectUrls []string                       `json:"postLogoutRedirectUrls,omitempty,omitzero"`
	PublicClient           bool                           `json:"publicClient,omitempty,omitzero"`
	RedirectUrls           []string                       `json:"redirectUrls,omitempty,omitzero"`
}

// AuthenticationClientAuthMethod Configures client authentication method, according to RFC 6749.
type AuthenticationClientAuthMethod string

// BasicAuth defines model for BasicAuth.
type BasicAuth struct {
	Password string        `json:"password"`
	Type     BasicAuthType `json:"type"`
	Username string        `json:"username"`
}

// BasicAuthType defines model for BasicAuth.Type.
type BasicAuthType string

// Category defines model for Category.
type Category = string

// CircuitBreaker defines model for CircuitBreaker.
type CircuitBreaker struct {
	// Enabled Flags if the Kong circuit breaker feature should be used
	Enabled bool `json:"enabled,omitempty,omitzero"`
}

// ConsumerRateLimit defines model for ConsumerRateLimit.
type ConsumerRateLimit struct {
	FaultTolerant     bool  `json:"faultTolerant,omitempty,omitzero"`
	HideClientHeaders bool  `json:"hideClientHeaders,omitempty,omitzero"`
	Hour              int32 `json:"hour,omitempty,omitzero"`

	// Id The unique ID of this consumer (their clientId)
	Id     string `json:"id,omitempty,omitzero"`
	Minute int32  `json:"minute,omitempty,omitzero"`
	Second int32  `json:"second,omitempty,omitzero"`
}

// ConsumerRateLimitContainer defines model for ConsumerRateLimitContainer.
type ConsumerRateLimitContainer struct {
	ConsumerDefault RateLimit `json:"consumerDefault,omitempty,omitzero"`

	// Consumers Rate limits for specific consumers. This will be merged with the default rate limit. This will take precedence over the default rate limit.
	Consumers []ConsumerRateLimit `json:"consumers,omitempty,omitzero"`
}

// Data defines model for Data.
type Data struct {
	Name  string `json:"name,omitempty,omitzero"`
	Value string `json:"value,omitempty,omitzero"`
}

// Error RFC-7807 conform object sent on any error
type Error struct {
	Detail    string         `json:"detail,omitempty,omitzero"`
	ErrorCode string         `json:"errorCode,omitempty,omitzero"`
	Fields    []FieldProblem `json:"fields,omitempty,omitzero"`
	Instance  string         `json:"instance,omitempty,omitzero"`
	Status    float32        `json:"status,omitempty,omitzero"`
	Title     string         `json:"title"`
	Type      string         `json:"type"`
}

// EventExposure defines model for EventExposure.
type EventExposure struct {
	AdditionalPublisherIds []string         `json:"additionalPublisherIds,omitempty,omitzero"`
	Approval               ApprovalStrategy `json:"approval"`
	EventCategory          Category         `json:"eventCategory,omitempty,omitzero"`
	EventType              string           `json:"eventType"`
	Scopes                 []EventScope     `json:"scopes,omitempty,omitzero"`
	TrustedTeams           []TrustedTeam    `json:"trustedTeams,omitempty,omitzero"`
	Type                   string           `json:"type"`
	Visibility             Visibility       `json:"visibility"`
}

// EventExposureInfo defines model for EventExposureInfo.
type EventExposureInfo struct {
	AdditionalPublisherIds []string              `json:"additionalPublisherIds,omitempty,omitzero"`
	Approval               ApprovalStrategy      `json:"approval"`
	EventCategory          Category              `json:"eventCategory,omitempty,omitzero"`
	EventType              string                `json:"eventType"`
	Scopes                 []EventScope          `json:"scopes,omitempty,omitzero"`
	TrustedTeams           []TrustedTeam         `json:"trustedTeams,omitempty,omitzero"`
	Type                   EventExposureInfoType `json:"type"`
	Visibility             Visibility            `json:"visibility"`
}

// EventExposureInfoType defines model for EventExposureInfo.Type.
type EventExposureInfoType string

// EventScope defines model for EventScope.
type EventScope struct {
	Name    string       `json:"name,omitempty,omitzero"`
	Trigger EventTrigger `json:"trigger,omitempty,omitzero"`
}

// EventSpecification defines model for EventSpecification.
type EventSpecification struct {
	Category string `json:"category,omitempty,omitzero"`

	// Description A short description for your events
	Description string `json:"description"`

	// Specification Optional JSON scheme
	Specification map[string]interface{} `json:"specification,omitempty,omitzero"`

	// Type Your event type (separated with dots)
	Type    string `json:"type"`
	Version string `json:"version"`
}

// EventSpecificationCreateRequest defines model for EventSpecificationCreateRequest.
type EventSpecificationCreateRequest struct {
	Category string `json:"category,omitempty,omitzero"`

	// Description A short description for your events
	Description string `json:"description"`

	// Specification Optional JSON scheme
	Specification map[string]interface{} `json:"specification,omitempty,omitzero"`

	// Team This field is only used for hub-scoped access to control the target team of the resource. For everything else, it can be ignored
	Team string `json:"team,omitempty,omitzero"`

	// Type Your event type (separated with dots)
	Type    string `json:"type"`
	Version string `json:"version"`
}

// EventSpecificationListResponse defines model for EventSpecificationListResponse.
type EventSpecificationListResponse struct {
	// UnderscoreLinks HATEOAS links for pagination
	UnderscoreLinks Links                        `json:"_links,omitempty,omitzero"`
	Items           []EventSpecificationResponse `json:"items,omitempty,omitzero"`
}

// EventSpecificationResponse defines model for EventSpecificationResponse.
type EventSpecificationResponse struct {
	Category string `json:"category,omitempty,omitzero"`

	// Description A short description for your events
	Description string `json:"description"`

	// Id Your event type name (separated with dashes)
	Id string `json:"id,omitempty,omitzero"`

	// Specification Optional JSON scheme
	Specification map[string]interface{} `json:"specification,omitempty,omitzero"`
	Status        Status                 `json:"status,omitempty,omitzero"`

	// Type Your event type (separated with dots)
	Type    string `json:"type"`
	Version string `json:"version"`
}

// EventSpecificationUpdateRequest defines model for EventSpecificationUpdateRequest.
type EventSpecificationUpdateRequest = EventSpecification

// EventSubscription defines model for EventSubscription.
type EventSubscription struct {
	Callback string `json:"callback,omitempty,omitzero"`

	// CircuitBreakerOptOut If your application does not need the circuit breaking feature of Horizon, you can opt out of it by setting this to true.
	CircuitBreakerOptOut bool   `json:"circuitBreakerOptOut,omitempty,omitzero"`
	DeliveryType         string `json:"deliveryType"`

	// EnforceGetHttpRequestMethodForHealthCheck If true, the health check will be performed with a GET request instead of a HEAD request
	EnforceGetHttpRequestMethodForHealthCheck bool `json:"enforceGetHttpRequestMethodForHealthCheck,omitempty,omitzero"`

	// EventRetentionTime It is possible to lower the default retention time of 7 days. See [docs](https://developer.telekom.de/docs/src/tardis_customer_handbook/horizon/feature-overview/Custom_Retention_Time/)
	EventRetentionTime string `json:"eventRetentionTime,omitempty,omitzero"`

	// EventType Unique identifier of the event type
	EventType   string `json:"eventType"`
	PayloadType string `json:"payloadType"`

	// RedeliveriesPerSecond The maximum possible number of redeliveries per second
	RedeliveriesPerSecond int `json:"redeliveriesPerSecond,omitempty,omitzero"`

	// RetryableStatusCodes List of HTTP status codes that are considered retryable.
	RetryableStatusCodes []int        `json:"retryableStatusCodes,omitempty,omitzero"`
	Scopes               []string     `json:"scopes,omitempty,omitzero"`
	Trigger              EventTrigger `json:"trigger,omitempty,omitzero"`
	Type                 string       `json:"type"`
}

// EventSubscriptionInfo defines model for EventSubscriptionInfo.
type EventSubscriptionInfo struct {
	Callback string `json:"callback,omitempty,omitzero"`

	// CircuitBreakerOptOut If your application does not need the circuit breaking feature of Horizon, you can opt out of it by setting this to true.
	CircuitBreakerOptOut bool   `json:"circuitBreakerOptOut,omitempty,omitzero"`
	DeliveryType         string `json:"deliveryType"`

	// EnforceGetHttpRequestMethodForHealthCheck If true, the health check will be performed with a GET request instead of a HEAD request
	EnforceGetHttpRequestMethodForHealthCheck bool `json:"enforceGetHttpRequestMethodForHealthCheck,omitempty,omitzero"`

	// EventRetentionTime It is possible to lower the default retention time of 7 days. See [docs](https://developer.telekom.de/docs/src/tardis_customer_handbook/horizon/feature-overview/Custom_Retention_Time/)
	EventRetentionTime string `json:"eventRetentionTime,omitempty,omitzero"`

	// EventType Unique identifier of the event type
	EventType   string `json:"eventType"`
	PayloadType string `json:"payloadType"`

	// RedeliveriesPerSecond The maximum possible number of redeliveries per second
	RedeliveriesPerSecond int `json:"redeliveriesPerSecond,omitempty,omitzero"`

	// RetryableStatusCodes List of HTTP status codes that are considered retryable.
	RetryableStatusCodes []int                     `json:"retryableStatusCodes,omitempty,omitzero"`
	Scopes               []string                  `json:"scopes,omitempty,omitzero"`
	Trigger              EventTrigger              `json:"trigger,omitempty,omitzero"`
	Type                 EventSubscriptionInfoType `json:"type"`
}

// EventSubscriptionInfoType defines model for EventSubscriptionInfo.Type.
type EventSubscriptionInfoType string

// EventTrigger defines model for EventTrigger.
type EventTrigger struct {
	AdvancedSelectionFilter map[string]map[string]interface{} `json:"advancedSelectionFilter,omitempty,omitzero"`
	ResponseFilter          []string                          `json:"responseFilter,omitempty,omitzero"`
	ResponseFilterMode      EventTriggerResponseFilterMode    `json:"responseFilterMode,omitempty,omitzero"`
	SelectionFilter         map[string]string                 `json:"selectionFilter,omitempty,omitzero"`
}

// EventTriggerResponseFilterMode defines model for EventTrigger.ResponseFilterMode.
type EventTriggerResponseFilterMode string

// Exposure defines model for Exposure.
type Exposure struct {
	union json.RawMessage
}

// ExposureInfo defines model for ExposureInfo.
type ExposureInfo struct {
	union json.RawMessage
}

// Failover defines model for Failover.
type Failover struct {
	// Zones Provide a list of zones which you are able to use for failover
	Zones []string `json:"zones"`
}

// FailoverInfo defines model for FailoverInfo.
type FailoverInfo struct {
	IrisTokenEndpointUrl   string `json:"irisTokenEndpointUrl,omitempty,omitzero"`
	StargateApiEndpointUrl string `json:"stargateApiEndpointUrl,omitempty,omitzero"`
	Zone                   string `json:"zone,omitempty,omitzero"`
}

// FieldProblem defines model for FieldProblem.
type FieldProblem struct {
	Detail string `json:"detail,omitempty,omitzero"`
	Path   string `json:"path,omitempty,omitzero"`
	Title  string `json:"title"`
}

// GrantType defines model for GrantType.
type GrantType string

// Health defines model for Health.
type Health struct {
	HttpPath string `json:"httpPath,omitempty,omitzero"`
}

// IpRestrictions defines model for IpRestrictions.
type IpRestrictions struct {
	Allow []string `json:"allow,omitempty,omitzero"`
}

// Links HATEOAS links for pagination
type Links struct {
	// Next the URI for the next page for requested pagination, based on the requested limit value
	Next string `json:"next"`

	// Self the URI for the current page for requested pagination
	Self string `json:"self"`
}

// LoadBalancing defines model for LoadBalancing.
type LoadBalancing struct {
	Health Health `json:"health,omitempty,omitzero"`

	// Servers Provide a list of servers to use for loadBalancing
	Servers []Server `json:"servers"`
}

// Oauth2 defines model for Oauth2.
type Oauth2 struct {
	ClientId      string    `json:"clientId,omitempty,omitzero"`
	ClientKey     string    `json:"clientKey,omitempty,omitzero"`
	ClientSecret  string    `json:"clientSecret,omitempty,omitzero"`
	GrantType     GrantType `json:"grantType,omitempty,omitzero"`
	Password      string    `json:"password,omitempty,omitzero"`
	RefreshToken  string    `json:"refreshToken,omitempty,omitzero"`
	Scopes        []string  `json:"scopes,omitempty,omitzero"`
	TokenEndpoint string    `json:"tokenEndpoint,omitempty,omitzero"`

	// TokenRequest Specifies if the authentication data should be sent to the external IDP via headers or in the body of the request
	TokenRequest Oauth2TokenRequest `json:"tokenRequest,omitempty,omitzero"`
	Type         Oauth2Type         `json:"type"`
	Username     string             `json:"username,omitempty,omitzero"`
}

// Oauth2TokenRequest Specifies if the authentication data should be sent to the external IDP via headers or in the body of the request
type Oauth2TokenRequest string

// Oauth2Type defines model for Oauth2.Type.
type Oauth2Type string

// OverallStatus Status of this resource and all its relevant sub-resources
type OverallStatus string

// Problem defines model for Problem.
type Problem struct {
	Cause    string      `json:"cause"`
	Context  string      `json:"context,omitempty,omitzero"`
	Details  string      `json:"details,omitempty,omitzero"`
	Message  string      `json:"message"`
	Resource ResourceRef `json:"resource,omitempty,omitzero"`
}

// ProcessingState defines model for ProcessingState.
type ProcessingState string

// RateLimit defines model for RateLimit.
type RateLimit struct {
	FaultTolerant     bool  `json:"faultTolerant,omitempty,omitzero"`
	HideClientHeaders bool  `json:"hideClientHeaders,omitempty,omitzero"`
	Hour              int32 `json:"hour,omitempty,omitzero"`
	Minute            int32 `json:"minute,omitempty,omitzero"`
	Second            int32 `json:"second,omitempty,omitzero"`
}

// RateLimitContainer defines model for RateLimitContainer.
type RateLimitContainer struct {
	ConsumerDefault RateLimit `json:"consumerDefault,omitempty,omitzero"`

	// Consumers Rate limits for specific consumers. This will be merged with the default rate limit. This will take precedence over the default rate limit.
	Consumers []ConsumerRateLimit `json:"consumers,omitempty,omitzero"`
	Provider  RateLimit           `json:"provider,omitempty,omitzero"`
}

// ResourceRef defines model for ResourceRef.
type ResourceRef struct {
	ApiVersion string `json:"apiVersion"`
	Kind       string `json:"kind"`
	Name       string `json:"name"`
	Namespace  string `json:"namespace"`
	Path       string `json:"path,omitempty,omitzero"`
}

// ResourceStatusResponse Response resource which contains information about the status of the resource and all its relevant sub-resources
type ResourceStatusResponse struct {
	// Errors List of errors that resulted while processing this resource
	Errors []Problem `json:"errors,omitempty,omitzero"`

	// Infos List of infos that resulted while processing this resource
	Infos []Problem `json:"infos,omitempty,omitzero"`

	// OverallStatus Status of this resource and all its relevant sub-resources
	OverallStatus   OverallStatus   `json:"overallStatus"`
	ProcessingState ProcessingState `json:"processingState"`
	State           State           `json:"state"`

	// Warnings List of warnings that resulted while processing this resource
	Warnings []Problem `json:"warnings,omitempty,omitzero"`
}

// Rover defines model for Rover.
type Rover struct {
	Authentication Authentication `json:"authentication,omitempty,omitzero"`
	Exposures      []Exposure     `json:"exposures,omitempty,omitzero"`
	Icto           string         `json:"icto,omitempty,omitzero"`
	Id             string         `json:"id,omitempty,omitzero"`
	IpRestrictions IpRestrictions `json:"ipRestrictions,omitempty,omitzero"`
	Status         Status         `json:"status,omitempty,omitzero"`
	Subscriptions  []Subscription `json:"subscriptions,omitempty,omitzero"`
	Zone           string         `json:"zone"`
}

// RoverCreateRequest defines model for RoverCreateRequest.
type RoverCreateRequest struct {
	Authentication Authentication `json:"authentication,omitempty,omitzero"`
	Exposures      []Exposure     `json:"exposures,omitempty,omitzero"`
	Icto           string         `json:"icto,omitempty,omitzero"`
	Id             string         `json:"id,omitempty,omitzero"`
	IpRestrictions IpRestrictions `json:"ipRestrictions,omitempty,omitzero"`
	Name           string         `json:"name,omitempty,omitzero"`
	Status         Status         `json:"status,omitempty,omitzero"`
	Subscriptions  []Subscription `json:"subscriptions,omitempty,omitzero"`

	// Team This field is only used for hub-scoped access to control the target team of the resource. For everything else, it can be ignored
	Team string `json:"team,omitempty,omitzero"`
	Zone string `json:"zone"`
}

// RoverInfoResponse defines model for RoverInfoResponse.
type RoverInfoResponse struct {
	Applications []ApplicationInfo `json:"applications"`
	Environment  string            `json:"environment"`
	Hub          string            `json:"hub"`
	Team         string            `json:"team"`
}

// RoverListResponse defines model for RoverListResponse.
type RoverListResponse struct {
	// UnderscoreLinks HATEOAS links for pagination
	UnderscoreLinks Links           `json:"_links"`
	Items           []RoverResponse `json:"items"`
}

// RoverResponse defines model for RoverResponse.
type RoverResponse struct {
	Authentication Authentication `json:"authentication,omitempty,omitzero"`
	Exposures      []Exposure     `json:"exposures,omitempty,omitzero"`
	Icto           string         `json:"icto,omitempty,omitzero"`
	Id             string         `json:"id,omitempty,omitzero"`
	IpRestrictions IpRestrictions `json:"ipRestrictions,omitempty,omitzero"`
	Name           string         `json:"name,omitempty,omitzero"`
	Status         Status         `json:"status,omitempty,omitzero"`
	Subscriptions  []Subscription `json:"subscriptions,omitempty,omitzero"`
	Zone           string         `json:"zone"`
}

// RoverSecretResponse defines model for RoverSecretResponse.
type RoverSecretResponse struct {
	Id     string `json:"id"`
	Secret string `json:"secret"`
}

// RoverUpdateRequest defines model for RoverUpdateRequest.
type RoverUpdateRequest = Rover

// Security defines model for Security.
type Security struct {
	union json.RawMessage
}

// Server defines model for Server.
type Server struct {
	Upstream string `json:"upstream"`
	Weight   int    `json:"weight,omitempty,omitzero"`
}

// State defines model for State.
type State string

// StateInfo defines model for StateInfo.
type StateInfo struct {
	Cause   string `json:"cause,omitempty,omitzero"`
	Message string `json:"message"`
}

// Status defines model for Status.
type Status struct {
	Errors          []StateInfo     `json:"errors,omitempty,omitzero"`
	Infos           []StateInfo     `json:"infos,omitempty,omitzero"`
	ProcessingState ProcessingState `json:"processingState"`
	State           State           `json:"state"`
	Time            string          `json:"time"`
	Warnings        []StateInfo     `json:"warnings,omitempty,omitzero"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	union json.RawMessage
}

// SubscriptionInfo defines model for SubscriptionInfo.
type SubscriptionInfo struct {
	union json.RawMessage
}

// TrustedTeam A trusted team is a team that is allowed to access the resource without explicit approval
type TrustedTeam struct {
	Team string `json:"team"`
}

// Visibility defines model for Visibility.
type Visibility string

// Cursor defines model for Cursor.
type Cursor = string

// Limit defines model for Limit.
type Limit = int32

// ShallowInfo defines model for ShallowInfo.
type ShallowInfo = bool

// Sort defines model for Sort.
type Sort string

// BadRequest RFC-7807 conform object sent on any error
type BadRequest = Error

// Forbidden RFC-7807 conform object sent on any error
type Forbidden = Error

// NotFound RFC-7807 conform object sent on any error
type NotFound = Error

// ServerError RFC-7807 conform object sent on any error
type ServerError = Error

// Unauthorized RFC-7807 conform object sent on any error
type Unauthorized = Error

// UnsupportedMediaType RFC-7807 conform object sent on any error
type UnsupportedMediaType = Error

// GetAllApiSpecificationsParams defines parameters for GetAllApiSpecifications.
type GetAllApiSpecificationsParams struct {
	// Limit page size requested by the consumer; must not be larger than the maximal page size
	Limit Limit `form:"limit,omitempty" json:"limit,omitempty,omitzero"`

	// Cursor cursor to be used for pagination. If not provided, the first page will be returned. The cursor is a string that points to a page of data.
	Cursor Cursor `form:"cursor,omitempty" json:"cursor,omitempty,omitzero"`

	// Sort list of fields to be used for sorting. Default is name
	Sort GetAllApiSpecificationsParamsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero"`
}

// GetAllApiSpecificationsParamsSort defines parameters for GetAllApiSpecifications.
type GetAllApiSpecificationsParamsSort string

// GetAllEventSpecificationsParams defines parameters for GetAllEventSpecifications.
type GetAllEventSpecificationsParams struct {
	// Limit page size requested by the consumer; must not be larger than the maximal page size
	Limit Limit `form:"limit,omitempty" json:"limit,omitempty,omitzero"`

	// Cursor cursor to be used for pagination. If not provided, the first page will be returned. The cursor is a string that points to a page of data.
	Cursor Cursor `form:"cursor,omitempty" json:"cursor,omitempty,omitzero"`

	// Sort list of fields to be used for sorting. Default is name
	Sort GetAllEventSpecificationsParamsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero"`
}

// GetAllEventSpecificationsParamsSort defines parameters for GetAllEventSpecifications.
type GetAllEventSpecificationsParamsSort string

// GetAllRoversParams defines parameters for GetAllRovers.
type GetAllRoversParams struct {
	// Limit page size requested by the consumer; must not be larger than the maximal page size
	Limit Limit `form:"limit,omitempty" json:"limit,omitempty,omitzero"`

	// Cursor cursor to be used for pagination. If not provided, the first page will be returned. The cursor is a string that points to a page of data.
	Cursor Cursor `form:"cursor,omitempty" json:"cursor,omitempty,omitzero"`

	// Sort list of fields to be used for sorting. Default is name
	Sort GetAllRoversParamsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero"`
}

// GetAllRoversParamsSort defines parameters for GetAllRovers.
type GetAllRoversParamsSort string

// GetApplicationsInfoParams defines parameters for GetApplicationsInfo.
type GetApplicationsInfoParams struct {
	// Limit page size requested by the consumer; must not be larger than the maximal page size
	Limit Limit `form:"limit,omitempty" json:"limit,omitempty,omitzero"`

	// Cursor cursor to be used for pagination. If not provided, the first page will be returned. The cursor is a string that points to a page of data.
	Cursor Cursor `form:"cursor,omitempty" json:"cursor,omitempty,omitzero"`

	// Sort list of fields to be used for sorting. Default is name
	Sort GetApplicationsInfoParamsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero"`

	// Names Filter by application names
	Names []string `form:"names,omitempty" json:"names,omitempty,omitzero"`

	// ShallowInfo If true, the status and information of all sub-resources will be omitted in the response. Only the information about the application itself will be returned. This will significantly reduce the response size and time. Default is false.
	ShallowInfo ShallowInfo `form:"shallowInfo,omitempty" json:"shallowInfo,omitempty,omitzero"`
}

// GetApplicationsInfoParamsSort defines parameters for GetApplicationsInfo.
type GetApplicationsInfoParamsSort string

// GetApplicationInfoParams defines parameters for GetApplicationInfo.
type GetApplicationInfoParams struct {
	// ShallowInfo If true, the status and information of all sub-resources will be omitted in the response. Only the information about the application itself will be returned. This will significantly reduce the response size and time. Default is false.
	ShallowInfo ShallowInfo `form:"shallowInfo,omitempty" json:"shallowInfo,omitempty,omitzero"`
}

// CreateApiSpecificationJSONRequestBody defines body for CreateApiSpecification for application/json ContentType.
type CreateApiSpecificationJSONRequestBody = ApiSpecificationCreateRequest

// UpdateApiSpecificationJSONRequestBody defines body for UpdateApiSpecification for application/json ContentType.
type UpdateApiSpecificationJSONRequestBody = ApiSpecificationUpdateRequest

// CreateEventSpecificationJSONRequestBody defines body for CreateEventSpecification for application/json ContentType.
type CreateEventSpecificationJSONRequestBody = EventSpecificationCreateRequest

// UpdateEventSpecificationJSONRequestBody defines body for UpdateEventSpecification for application/json ContentType.
type UpdateEventSpecificationJSONRequestBody = EventSpecificationUpdateRequest

// CreateRoverJSONRequestBody defines body for CreateRover for application/json ContentType.
type CreateRoverJSONRequestBody = RoverCreateRequest

// UpdateRoverJSONRequestBody defines body for UpdateRover for application/json ContentType.
type UpdateRoverJSONRequestBody = RoverUpdateRequest

// AsApiExposure returns the union data inside the Exposure as a ApiExposure
func (t Exposure) AsApiExposure() (ApiExposure, error) {
	var body ApiExposure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiExposure overwrites any union data inside the Exposure as the provided ApiExposure
func (t *Exposure) FromApiExposure(v ApiExposure) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiExposure performs a merge with any union data inside the Exposure, using the provided ApiExposure
func (t *Exposure) MergeApiExposure(v ApiExposure) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventExposure returns the union data inside the Exposure as a EventExposure
func (t Exposure) AsEventExposure() (EventExposure, error) {
	var body EventExposure
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventExposure overwrites any union data inside the Exposure as the provided EventExposure
func (t *Exposure) FromEventExposure(v EventExposure) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventExposure performs a merge with any union data inside the Exposure, using the provided EventExposure
func (t *Exposure) MergeEventExposure(v EventExposure) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Exposure) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Exposure) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "api":
		return t.AsApiExposure()
	case "event":
		return t.AsEventExposure()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Exposure) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Exposure) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiExposureInfo returns the union data inside the ExposureInfo as a ApiExposureInfo
func (t ExposureInfo) AsApiExposureInfo() (ApiExposureInfo, error) {
	var body ApiExposureInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiExposureInfo overwrites any union data inside the ExposureInfo as the provided ApiExposureInfo
func (t *ExposureInfo) FromApiExposureInfo(v ApiExposureInfo) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiExposureInfo performs a merge with any union data inside the ExposureInfo, using the provided ApiExposureInfo
func (t *ExposureInfo) MergeApiExposureInfo(v ApiExposureInfo) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventExposureInfo returns the union data inside the ExposureInfo as a EventExposureInfo
func (t ExposureInfo) AsEventExposureInfo() (EventExposureInfo, error) {
	var body EventExposureInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventExposureInfo overwrites any union data inside the ExposureInfo as the provided EventExposureInfo
func (t *ExposureInfo) FromEventExposureInfo(v EventExposureInfo) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventExposureInfo performs a merge with any union data inside the ExposureInfo, using the provided EventExposureInfo
func (t *ExposureInfo) MergeEventExposureInfo(v EventExposureInfo) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExposureInfo) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ExposureInfo) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "api":
		return t.AsApiExposureInfo()
	case "event":
		return t.AsEventExposureInfo()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ExposureInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExposureInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsOauth2 returns the union data inside the Security as a Oauth2
func (t Security) AsOauth2() (Oauth2, error) {
	var body Oauth2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOauth2 overwrites any union data inside the Security as the provided Oauth2
func (t *Security) FromOauth2(v Oauth2) error {
	v.Type = "oauth2"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOauth2 performs a merge with any union data inside the Security, using the provided Oauth2
func (t *Security) MergeOauth2(v Oauth2) error {
	v.Type = "oauth2"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBasicAuth returns the union data inside the Security as a BasicAuth
func (t Security) AsBasicAuth() (BasicAuth, error) {
	var body BasicAuth
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBasicAuth overwrites any union data inside the Security as the provided BasicAuth
func (t *Security) FromBasicAuth(v BasicAuth) error {
	v.Type = "basicAuth"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBasicAuth performs a merge with any union data inside the Security, using the provided BasicAuth
func (t *Security) MergeBasicAuth(v BasicAuth) error {
	v.Type = "basicAuth"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Security) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Security) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "basicAuth":
		return t.AsBasicAuth()
	case "oauth2":
		return t.AsOauth2()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Security) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Security) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiSubscription returns the union data inside the Subscription as a ApiSubscription
func (t Subscription) AsApiSubscription() (ApiSubscription, error) {
	var body ApiSubscription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiSubscription overwrites any union data inside the Subscription as the provided ApiSubscription
func (t *Subscription) FromApiSubscription(v ApiSubscription) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiSubscription performs a merge with any union data inside the Subscription, using the provided ApiSubscription
func (t *Subscription) MergeApiSubscription(v ApiSubscription) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventSubscription returns the union data inside the Subscription as a EventSubscription
func (t Subscription) AsEventSubscription() (EventSubscription, error) {
	var body EventSubscription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventSubscription overwrites any union data inside the Subscription as the provided EventSubscription
func (t *Subscription) FromEventSubscription(v EventSubscription) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventSubscription performs a merge with any union data inside the Subscription, using the provided EventSubscription
func (t *Subscription) MergeEventSubscription(v EventSubscription) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Subscription) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Subscription) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "api":
		return t.AsApiSubscription()
	case "event":
		return t.AsEventSubscription()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Subscription) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Subscription) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsApiSubscriptionInfo returns the union data inside the SubscriptionInfo as a ApiSubscriptionInfo
func (t SubscriptionInfo) AsApiSubscriptionInfo() (ApiSubscriptionInfo, error) {
	var body ApiSubscriptionInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromApiSubscriptionInfo overwrites any union data inside the SubscriptionInfo as the provided ApiSubscriptionInfo
func (t *SubscriptionInfo) FromApiSubscriptionInfo(v ApiSubscriptionInfo) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeApiSubscriptionInfo performs a merge with any union data inside the SubscriptionInfo, using the provided ApiSubscriptionInfo
func (t *SubscriptionInfo) MergeApiSubscriptionInfo(v ApiSubscriptionInfo) error {
	v.Type = "api"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEventSubscriptionInfo returns the union data inside the SubscriptionInfo as a EventSubscriptionInfo
func (t SubscriptionInfo) AsEventSubscriptionInfo() (EventSubscriptionInfo, error) {
	var body EventSubscriptionInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEventSubscriptionInfo overwrites any union data inside the SubscriptionInfo as the provided EventSubscriptionInfo
func (t *SubscriptionInfo) FromEventSubscriptionInfo(v EventSubscriptionInfo) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEventSubscriptionInfo performs a merge with any union data inside the SubscriptionInfo, using the provided EventSubscriptionInfo
func (t *SubscriptionInfo) MergeEventSubscriptionInfo(v EventSubscriptionInfo) error {
	v.Type = "event"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SubscriptionInfo) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t SubscriptionInfo) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "api":
		return t.AsApiSubscriptionInfo()
	case "event":
		return t.AsEventSubscriptionInfo()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t SubscriptionInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SubscriptionInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
