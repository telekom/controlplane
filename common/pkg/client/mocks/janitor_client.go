// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/telekom/controlplane/common/pkg/client (interfaces: JanitorClient)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "github.com/telekom/controlplane/common/pkg/client"
	types "github.com/telekom/controlplane/common/pkg/types"
	runtime "k8s.io/apimachinery/pkg/runtime"
	types0 "k8s.io/apimachinery/pkg/types"
	client0 "sigs.k8s.io/controller-runtime/pkg/client"
	controllerutil "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

// MockJanitorClient is a mock of JanitorClient interface.
type MockJanitorClient struct {
	ctrl     *gomock.Controller
	recorder *MockJanitorClientMockRecorder
}

// MockJanitorClientMockRecorder is the mock recorder for MockJanitorClient.
type MockJanitorClientMockRecorder struct {
	mock *MockJanitorClient
}

// NewMockJanitorClient creates a new mock instance.
func NewMockJanitorClient(ctrl *gomock.Controller) *MockJanitorClient {
	mock := &MockJanitorClient{ctrl: ctrl}
	mock.recorder = &MockJanitorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJanitorClient) EXPECT() *MockJanitorClientMockRecorder {
	return m.recorder
}

// AddKnownTypeToState mocks base method.
func (m *MockJanitorClient) AddKnownTypeToState(arg0 types.Object) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddKnownTypeToState", arg0)
}

// AddKnownTypeToState indicates an expected call of AddKnownTypeToState.
func (mr *MockJanitorClientMockRecorder) AddKnownTypeToState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKnownTypeToState", reflect.TypeOf((*MockJanitorClient)(nil).AddKnownTypeToState), arg0)
}

// AllReady mocks base method.
func (m *MockJanitorClient) AllReady() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllReady")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllReady indicates an expected call of AllReady.
func (mr *MockJanitorClientMockRecorder) AllReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllReady", reflect.TypeOf((*MockJanitorClient)(nil).AllReady))
}

// AnyChanged mocks base method.
func (m *MockJanitorClient) AnyChanged() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnyChanged")
	ret0, _ := ret[0].(bool)
	return ret0
}

// AnyChanged indicates an expected call of AnyChanged.
func (mr *MockJanitorClientMockRecorder) AnyChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnyChanged", reflect.TypeOf((*MockJanitorClient)(nil).AnyChanged))
}

// Cleanup mocks base method.
func (m *MockJanitorClient) Cleanup(arg0 context.Context, arg1 types.ObjectList, arg2 []client0.ListOption) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockJanitorClientMockRecorder) Cleanup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockJanitorClient)(nil).Cleanup), arg0, arg1, arg2)
}

// CleanupAll mocks base method.
func (m *MockJanitorClient) CleanupAll(arg0 context.Context, arg1 []client0.ListOption) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupAll", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CleanupAll indicates an expected call of CleanupAll.
func (mr *MockJanitorClientMockRecorder) CleanupAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupAll", reflect.TypeOf((*MockJanitorClient)(nil).CleanupAll), arg0, arg1)
}

// CreateOrUpdate mocks base method.
func (m *MockJanitorClient) CreateOrUpdate(arg0 context.Context, arg1 client0.Object, arg2 controllerutil.MutateFn) (controllerutil.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2)
	ret0, _ := ret[0].(controllerutil.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockJanitorClientMockRecorder) CreateOrUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockJanitorClient)(nil).CreateOrUpdate), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockJanitorClient) Delete(arg0 context.Context, arg1 client0.Object, arg2 ...client0.DeleteOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockJanitorClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockJanitorClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockJanitorClient) Get(arg0 context.Context, arg1 types0.NamespacedName, arg2 client0.Object, arg3 ...client0.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockJanitorClientMockRecorder) Get(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJanitorClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockJanitorClient) List(arg0 context.Context, arg1 client0.ObjectList, arg2 ...client0.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockJanitorClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJanitorClient)(nil).List), varargs...)
}

// Reset mocks base method.
func (m *MockJanitorClient) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockJanitorClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockJanitorClient)(nil).Reset))
}

// Scheme mocks base method.
func (m *MockJanitorClient) Scheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// Scheme indicates an expected call of Scheme.
func (mr *MockJanitorClientMockRecorder) Scheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheme", reflect.TypeOf((*MockJanitorClient)(nil).Scheme))
}

// Wrap mocks base method.
func (m *MockJanitorClient) Wrap(arg0 context.Context, arg1 types.ObjectList, arg2 []client0.ListOption, arg3 func(client.ScopedClient) bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wrap", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wrap indicates an expected call of Wrap.
func (mr *MockJanitorClientMockRecorder) Wrap(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wrap", reflect.TypeOf((*MockJanitorClient)(nil).Wrap), arg0, arg1, arg2, arg3)
}
