// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.5. DO NOT EDIT.

package fake

import (
	context "context"

	client "github.com/telekom/controlplane/common/pkg/client"

	controllerutil "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"

	mock "github.com/stretchr/testify/mock"

	pkgclient "sigs.k8s.io/controller-runtime/pkg/client"

	pkgtypes "k8s.io/apimachinery/pkg/types"

	runtime "k8s.io/apimachinery/pkg/runtime"

	types "github.com/telekom/controlplane/common/pkg/types"
)

// MockJanitorClient is an autogenerated mock type for the JanitorClient type
type MockJanitorClient struct {
	mock.Mock
}

type MockJanitorClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJanitorClient) EXPECT() *MockJanitorClient_Expecter {
	return &MockJanitorClient_Expecter{mock: &_m.Mock}
}

// AddKnownTypeToState provides a mock function with given fields: obj
func (_m *MockJanitorClient) AddKnownTypeToState(obj types.Object) {
	_m.Called(obj)
}

// MockJanitorClient_AddKnownTypeToState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddKnownTypeToState'
type MockJanitorClient_AddKnownTypeToState_Call struct {
	*mock.Call
}

// AddKnownTypeToState is a helper method to define mock.On call
//   - obj types.Object
func (_e *MockJanitorClient_Expecter) AddKnownTypeToState(obj interface{}) *MockJanitorClient_AddKnownTypeToState_Call {
	return &MockJanitorClient_AddKnownTypeToState_Call{Call: _e.mock.On("AddKnownTypeToState", obj)}
}

func (_c *MockJanitorClient_AddKnownTypeToState_Call) Run(run func(obj types.Object)) *MockJanitorClient_AddKnownTypeToState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Object))
	})
	return _c
}

func (_c *MockJanitorClient_AddKnownTypeToState_Call) Return() *MockJanitorClient_AddKnownTypeToState_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockJanitorClient_AddKnownTypeToState_Call) RunAndReturn(run func(types.Object)) *MockJanitorClient_AddKnownTypeToState_Call {
	_c.Run(run)
	return _c
}

// AllReady provides a mock function with no fields
func (_m *MockJanitorClient) AllReady() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AllReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockJanitorClient_AllReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllReady'
type MockJanitorClient_AllReady_Call struct {
	*mock.Call
}

// AllReady is a helper method to define mock.On call
func (_e *MockJanitorClient_Expecter) AllReady() *MockJanitorClient_AllReady_Call {
	return &MockJanitorClient_AllReady_Call{Call: _e.mock.On("AllReady")}
}

func (_c *MockJanitorClient_AllReady_Call) Run(run func()) *MockJanitorClient_AllReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJanitorClient_AllReady_Call) Return(_a0 bool) *MockJanitorClient_AllReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJanitorClient_AllReady_Call) RunAndReturn(run func() bool) *MockJanitorClient_AllReady_Call {
	_c.Call.Return(run)
	return _c
}

// AnyChanged provides a mock function with no fields
func (_m *MockJanitorClient) AnyChanged() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AnyChanged")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockJanitorClient_AnyChanged_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnyChanged'
type MockJanitorClient_AnyChanged_Call struct {
	*mock.Call
}

// AnyChanged is a helper method to define mock.On call
func (_e *MockJanitorClient_Expecter) AnyChanged() *MockJanitorClient_AnyChanged_Call {
	return &MockJanitorClient_AnyChanged_Call{Call: _e.mock.On("AnyChanged")}
}

func (_c *MockJanitorClient_AnyChanged_Call) Run(run func()) *MockJanitorClient_AnyChanged_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJanitorClient_AnyChanged_Call) Return(_a0 bool) *MockJanitorClient_AnyChanged_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJanitorClient_AnyChanged_Call) RunAndReturn(run func() bool) *MockJanitorClient_AnyChanged_Call {
	_c.Call.Return(run)
	return _c
}

// Cleanup provides a mock function with given fields: ctx, objectList, listOpts
func (_m *MockJanitorClient) Cleanup(ctx context.Context, objectList types.ObjectList, listOpts []pkgclient.ListOption) (int, error) {
	ret := _m.Called(ctx, objectList, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ObjectList, []pkgclient.ListOption) (int, error)); ok {
		return rf(ctx, objectList, listOpts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ObjectList, []pkgclient.ListOption) int); ok {
		r0 = rf(ctx, objectList, listOpts)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ObjectList, []pkgclient.ListOption) error); ok {
		r1 = rf(ctx, objectList, listOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJanitorClient_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type MockJanitorClient_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - ctx context.Context
//   - objectList types.ObjectList
//   - listOpts []pkgclient.ListOption
func (_e *MockJanitorClient_Expecter) Cleanup(ctx interface{}, objectList interface{}, listOpts interface{}) *MockJanitorClient_Cleanup_Call {
	return &MockJanitorClient_Cleanup_Call{Call: _e.mock.On("Cleanup", ctx, objectList, listOpts)}
}

func (_c *MockJanitorClient_Cleanup_Call) Run(run func(ctx context.Context, objectList types.ObjectList, listOpts []pkgclient.ListOption)) *MockJanitorClient_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ObjectList), args[2].([]pkgclient.ListOption))
	})
	return _c
}

func (_c *MockJanitorClient_Cleanup_Call) Return(deleted int, err error) *MockJanitorClient_Cleanup_Call {
	_c.Call.Return(deleted, err)
	return _c
}

func (_c *MockJanitorClient_Cleanup_Call) RunAndReturn(run func(context.Context, types.ObjectList, []pkgclient.ListOption) (int, error)) *MockJanitorClient_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// CleanupAll provides a mock function with given fields: ctx, listOpts
func (_m *MockJanitorClient) CleanupAll(ctx context.Context, listOpts []pkgclient.ListOption) (int, error) {
	ret := _m.Called(ctx, listOpts)

	if len(ret) == 0 {
		panic("no return value specified for CleanupAll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []pkgclient.ListOption) (int, error)); ok {
		return rf(ctx, listOpts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []pkgclient.ListOption) int); ok {
		r0 = rf(ctx, listOpts)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []pkgclient.ListOption) error); ok {
		r1 = rf(ctx, listOpts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJanitorClient_CleanupAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupAll'
type MockJanitorClient_CleanupAll_Call struct {
	*mock.Call
}

// CleanupAll is a helper method to define mock.On call
//   - ctx context.Context
//   - listOpts []pkgclient.ListOption
func (_e *MockJanitorClient_Expecter) CleanupAll(ctx interface{}, listOpts interface{}) *MockJanitorClient_CleanupAll_Call {
	return &MockJanitorClient_CleanupAll_Call{Call: _e.mock.On("CleanupAll", ctx, listOpts)}
}

func (_c *MockJanitorClient_CleanupAll_Call) Run(run func(ctx context.Context, listOpts []pkgclient.ListOption)) *MockJanitorClient_CleanupAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]pkgclient.ListOption))
	})
	return _c
}

func (_c *MockJanitorClient_CleanupAll_Call) Return(_a0 int, _a1 error) *MockJanitorClient_CleanupAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJanitorClient_CleanupAll_Call) RunAndReturn(run func(context.Context, []pkgclient.ListOption) (int, error)) *MockJanitorClient_CleanupAll_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrUpdate provides a mock function with given fields: ctx, obj, mutate
func (_m *MockJanitorClient) CreateOrUpdate(ctx context.Context, obj pkgclient.Object, mutate controllerutil.MutateFn) (controllerutil.OperationResult, error) {
	ret := _m.Called(ctx, obj, mutate)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 controllerutil.OperationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgclient.Object, controllerutil.MutateFn) (controllerutil.OperationResult, error)); ok {
		return rf(ctx, obj, mutate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkgclient.Object, controllerutil.MutateFn) controllerutil.OperationResult); ok {
		r0 = rf(ctx, obj, mutate)
	} else {
		r0 = ret.Get(0).(controllerutil.OperationResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkgclient.Object, controllerutil.MutateFn) error); ok {
		r1 = rf(ctx, obj, mutate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJanitorClient_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockJanitorClient_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - obj pkgclient.Object
//   - mutate controllerutil.MutateFn
func (_e *MockJanitorClient_Expecter) CreateOrUpdate(ctx interface{}, obj interface{}, mutate interface{}) *MockJanitorClient_CreateOrUpdate_Call {
	return &MockJanitorClient_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", ctx, obj, mutate)}
}

func (_c *MockJanitorClient_CreateOrUpdate_Call) Run(run func(ctx context.Context, obj pkgclient.Object, mutate controllerutil.MutateFn)) *MockJanitorClient_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkgclient.Object), args[2].(controllerutil.MutateFn))
	})
	return _c
}

func (_c *MockJanitorClient_CreateOrUpdate_Call) Return(_a0 controllerutil.OperationResult, _a1 error) *MockJanitorClient_CreateOrUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJanitorClient_CreateOrUpdate_Call) RunAndReturn(run func(context.Context, pkgclient.Object, controllerutil.MutateFn) (controllerutil.OperationResult, error)) *MockJanitorClient_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, obj, opts
func (_m *MockJanitorClient) Delete(ctx context.Context, obj pkgclient.Object, opts ...pkgclient.DeleteOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgclient.Object, ...pkgclient.DeleteOption) error); ok {
		r0 = rf(ctx, obj, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJanitorClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockJanitorClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - obj pkgclient.Object
//   - opts ...pkgclient.DeleteOption
func (_e *MockJanitorClient_Expecter) Delete(ctx interface{}, obj interface{}, opts ...interface{}) *MockJanitorClient_Delete_Call {
	return &MockJanitorClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, obj}, opts...)...)}
}

func (_c *MockJanitorClient_Delete_Call) Run(run func(ctx context.Context, obj pkgclient.Object, opts ...pkgclient.DeleteOption)) *MockJanitorClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]pkgclient.DeleteOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(pkgclient.DeleteOption)
			}
		}
		run(args[0].(context.Context), args[1].(pkgclient.Object), variadicArgs...)
	})
	return _c
}

func (_c *MockJanitorClient_Delete_Call) Return(_a0 error) *MockJanitorClient_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJanitorClient_Delete_Call) RunAndReturn(run func(context.Context, pkgclient.Object, ...pkgclient.DeleteOption) error) *MockJanitorClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, key, obj, opts
func (_m *MockJanitorClient) Get(ctx context.Context, key pkgtypes.NamespacedName, obj pkgclient.Object, opts ...pkgclient.GetOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgtypes.NamespacedName, pkgclient.Object, ...pkgclient.GetOption) error); ok {
		r0 = rf(ctx, key, obj, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJanitorClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockJanitorClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key pkgtypes.NamespacedName
//   - obj pkgclient.Object
//   - opts ...pkgclient.GetOption
func (_e *MockJanitorClient_Expecter) Get(ctx interface{}, key interface{}, obj interface{}, opts ...interface{}) *MockJanitorClient_Get_Call {
	return &MockJanitorClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, key, obj}, opts...)...)}
}

func (_c *MockJanitorClient_Get_Call) Run(run func(ctx context.Context, key pkgtypes.NamespacedName, obj pkgclient.Object, opts ...pkgclient.GetOption)) *MockJanitorClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]pkgclient.GetOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(pkgclient.GetOption)
			}
		}
		run(args[0].(context.Context), args[1].(pkgtypes.NamespacedName), args[2].(pkgclient.Object), variadicArgs...)
	})
	return _c
}

func (_c *MockJanitorClient_Get_Call) Return(_a0 error) *MockJanitorClient_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJanitorClient_Get_Call) RunAndReturn(run func(context.Context, pkgtypes.NamespacedName, pkgclient.Object, ...pkgclient.GetOption) error) *MockJanitorClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, list, opts
func (_m *MockJanitorClient) List(ctx context.Context, list pkgclient.ObjectList, opts ...pkgclient.ListOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, list)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pkgclient.ObjectList, ...pkgclient.ListOption) error); ok {
		r0 = rf(ctx, list, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockJanitorClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockJanitorClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - list pkgclient.ObjectList
//   - opts ...pkgclient.ListOption
func (_e *MockJanitorClient_Expecter) List(ctx interface{}, list interface{}, opts ...interface{}) *MockJanitorClient_List_Call {
	return &MockJanitorClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, list}, opts...)...)}
}

func (_c *MockJanitorClient_List_Call) Run(run func(ctx context.Context, list pkgclient.ObjectList, opts ...pkgclient.ListOption)) *MockJanitorClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]pkgclient.ListOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(pkgclient.ListOption)
			}
		}
		run(args[0].(context.Context), args[1].(pkgclient.ObjectList), variadicArgs...)
	})
	return _c
}

func (_c *MockJanitorClient_List_Call) Return(_a0 error) *MockJanitorClient_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJanitorClient_List_Call) RunAndReturn(run func(context.Context, pkgclient.ObjectList, ...pkgclient.ListOption) error) *MockJanitorClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with no fields
func (_m *MockJanitorClient) Reset() {
	_m.Called()
}

// MockJanitorClient_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type MockJanitorClient_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
func (_e *MockJanitorClient_Expecter) Reset() *MockJanitorClient_Reset_Call {
	return &MockJanitorClient_Reset_Call{Call: _e.mock.On("Reset")}
}

func (_c *MockJanitorClient_Reset_Call) Run(run func()) *MockJanitorClient_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJanitorClient_Reset_Call) Return() *MockJanitorClient_Reset_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockJanitorClient_Reset_Call) RunAndReturn(run func()) *MockJanitorClient_Reset_Call {
	_c.Run(run)
	return _c
}

// Scheme provides a mock function with no fields
func (_m *MockJanitorClient) Scheme() *runtime.Scheme {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scheme")
	}

	var r0 *runtime.Scheme
	if rf, ok := ret.Get(0).(func() *runtime.Scheme); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*runtime.Scheme)
		}
	}

	return r0
}

// MockJanitorClient_Scheme_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scheme'
type MockJanitorClient_Scheme_Call struct {
	*mock.Call
}

// Scheme is a helper method to define mock.On call
func (_e *MockJanitorClient_Expecter) Scheme() *MockJanitorClient_Scheme_Call {
	return &MockJanitorClient_Scheme_Call{Call: _e.mock.On("Scheme")}
}

func (_c *MockJanitorClient_Scheme_Call) Run(run func()) *MockJanitorClient_Scheme_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJanitorClient_Scheme_Call) Return(_a0 *runtime.Scheme) *MockJanitorClient_Scheme_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJanitorClient_Scheme_Call) RunAndReturn(run func() *runtime.Scheme) *MockJanitorClient_Scheme_Call {
	_c.Call.Return(run)
	return _c
}

// Wrap provides a mock function with given fields: ctx, objectList, listOpts, f
func (_m *MockJanitorClient) Wrap(ctx context.Context, objectList types.ObjectList, listOpts []pkgclient.ListOption, f func(client.ScopedClient) bool) (int, error) {
	ret := _m.Called(ctx, objectList, listOpts, f)

	if len(ret) == 0 {
		panic("no return value specified for Wrap")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ObjectList, []pkgclient.ListOption, func(client.ScopedClient) bool) (int, error)); ok {
		return rf(ctx, objectList, listOpts, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ObjectList, []pkgclient.ListOption, func(client.ScopedClient) bool) int); ok {
		r0 = rf(ctx, objectList, listOpts, f)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ObjectList, []pkgclient.ListOption, func(client.ScopedClient) bool) error); ok {
		r1 = rf(ctx, objectList, listOpts, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJanitorClient_Wrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wrap'
type MockJanitorClient_Wrap_Call struct {
	*mock.Call
}

// Wrap is a helper method to define mock.On call
//   - ctx context.Context
//   - objectList types.ObjectList
//   - listOpts []pkgclient.ListOption
//   - f func(client.ScopedClient) bool
func (_e *MockJanitorClient_Expecter) Wrap(ctx interface{}, objectList interface{}, listOpts interface{}, f interface{}) *MockJanitorClient_Wrap_Call {
	return &MockJanitorClient_Wrap_Call{Call: _e.mock.On("Wrap", ctx, objectList, listOpts, f)}
}

func (_c *MockJanitorClient_Wrap_Call) Run(run func(ctx context.Context, objectList types.ObjectList, listOpts []pkgclient.ListOption, f func(client.ScopedClient) bool)) *MockJanitorClient_Wrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ObjectList), args[2].([]pkgclient.ListOption), args[3].(func(client.ScopedClient) bool))
	})
	return _c
}

func (_c *MockJanitorClient_Wrap_Call) Return(deleted int, err error) *MockJanitorClient_Wrap_Call {
	_c.Call.Return(deleted, err)
	return _c
}

func (_c *MockJanitorClient_Wrap_Call) RunAndReturn(run func(context.Context, types.ObjectList, []pkgclient.ListOption, func(client.ScopedClient) bool) (int, error)) *MockJanitorClient_Wrap_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJanitorClient creates a new instance of MockJanitorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJanitorClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJanitorClient {
	mock := &MockJanitorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
