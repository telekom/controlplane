# Copyright 2025 Deutsche Telekom IT GmbH
#
# SPDX-License-Identifier: Apache-2.0

name: Reusable Helm Chart Publishing

on:
  workflow_call:
    inputs:
      chart_path:
        description: 'Path to the Helm chart directory'
        required: true
        type: string
      version:
        description: 'Chart version to use (overrides Chart.yaml)'
        required: false
        type: string
    
permissions:
  packages: write
  contents: read

jobs:
  publish-helm-chart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GHCR
        run: |
          helm registry login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Lint Helm Chart
        run: |
          helm lint ${{ inputs.chart_path }}

      - name: Inject slug vars
        uses: rlespinasse/github-slug-action@v5

      - name: Extract Version Information
        id: version
        run: |
          # Use input version if provided
          if [ -n "${{ inputs.version }}" ]; then
            effective_version="${{ inputs.version }}"
          else
            # Check if GITHUB_REF_SLUG is a valid semantic version
            if [[ "${GITHUB_REF_SLUG}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+ ]]; then
              # If it's a valid semver (like v1.2.3 or 1.2.3)
              effective_version="${GITHUB_REF_SLUG}"
            else
              # For branch names that aren't semver compliant, use 0.0.0-commit_hash format
              # Get the short commit hash to make the version unique
              commit_hash=$(git rev-parse --short HEAD)
              effective_version="0.0.0-${commit_hash}"
            fi
          fi

          echo "Using version: $effective_version"
          echo "version=$effective_version" >> $GITHUB_OUTPUT
          echo "app_version=$effective_version" >> $GITHUB_OUTPUT

      - name: Package Helm Chart
        run: |
          helm package ${{ inputs.chart_path }} \
            --version ${{ steps.version.outputs.version }} \
            --app-version ${{ steps.version.outputs.app_version }} \
            --destination charts

      - name: Push Helm Chart to GHCR
        run: |
          helm push charts/*.tgz oci://ghcr.io/${{ github.repository_owner }}/o28m-charts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}