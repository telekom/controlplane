// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/telekom/controlplane/rover-ctl/pkg/types"
)

// MockResourceHandler is an autogenerated mock type for the ResourceHandler type
type MockResourceHandler struct {
	mock.Mock
}

type MockResourceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceHandler) EXPECT() *MockResourceHandler_Expecter {
	return &MockResourceHandler_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, obj
func (_m *MockResourceHandler) Apply(ctx context.Context, obj types.Object) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Object) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResourceHandler_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type MockResourceHandler_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - obj types.Object
func (_e *MockResourceHandler_Expecter) Apply(ctx interface{}, obj interface{}) *MockResourceHandler_Apply_Call {
	return &MockResourceHandler_Apply_Call{Call: _e.mock.On("Apply", ctx, obj)}
}

func (_c *MockResourceHandler_Apply_Call) Run(run func(ctx context.Context, obj types.Object)) *MockResourceHandler_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Object))
	})
	return _c
}

func (_c *MockResourceHandler_Apply_Call) Return(_a0 error) *MockResourceHandler_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceHandler_Apply_Call) RunAndReturn(run func(context.Context, types.Object) error) *MockResourceHandler_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, obj
func (_m *MockResourceHandler) Delete(ctx context.Context, obj types.Object) error {
	ret := _m.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Object) error); ok {
		r0 = rf(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockResourceHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockResourceHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - obj types.Object
func (_e *MockResourceHandler_Expecter) Delete(ctx interface{}, obj interface{}) *MockResourceHandler_Delete_Call {
	return &MockResourceHandler_Delete_Call{Call: _e.mock.On("Delete", ctx, obj)}
}

func (_c *MockResourceHandler_Delete_Call) Run(run func(ctx context.Context, obj types.Object)) *MockResourceHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Object))
	})
	return _c
}

func (_c *MockResourceHandler_Delete_Call) Return(_a0 error) *MockResourceHandler_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceHandler_Delete_Call) RunAndReturn(run func(context.Context, types.Object) error) *MockResourceHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockResourceHandler) Get(ctx context.Context, name string) (interface{}, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockResourceHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockResourceHandler_Expecter) Get(ctx interface{}, name interface{}) *MockResourceHandler_Get_Call {
	return &MockResourceHandler_Get_Call{Call: _e.mock.On("Get", ctx, name)}
}

func (_c *MockResourceHandler_Get_Call) Run(run func(ctx context.Context, name string)) *MockResourceHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceHandler_Get_Call) Return(_a0 interface{}, _a1 error) *MockResourceHandler_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceHandler_Get_Call) RunAndReturn(run func(context.Context, string) (interface{}, error)) *MockResourceHandler_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx, name
func (_m *MockResourceHandler) Info(ctx context.Context, name string) (interface{}, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (interface{}, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceHandler_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockResourceHandler_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockResourceHandler_Expecter) Info(ctx interface{}, name interface{}) *MockResourceHandler_Info_Call {
	return &MockResourceHandler_Info_Call{Call: _e.mock.On("Info", ctx, name)}
}

func (_c *MockResourceHandler_Info_Call) Run(run func(ctx context.Context, name string)) *MockResourceHandler_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceHandler_Info_Call) Return(_a0 interface{}, _a1 error) *MockResourceHandler_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceHandler_Info_Call) RunAndReturn(run func(context.Context, string) (interface{}, error)) *MockResourceHandler_Info_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockResourceHandler) List(ctx context.Context) ([]interface{}, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]interface{}, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceHandler_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockResourceHandler_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockResourceHandler_Expecter) List(ctx interface{}) *MockResourceHandler_List_Call {
	return &MockResourceHandler_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockResourceHandler_List_Call) Run(run func(ctx context.Context)) *MockResourceHandler_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockResourceHandler_List_Call) Return(_a0 []interface{}, _a1 error) *MockResourceHandler_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceHandler_List_Call) RunAndReturn(run func(context.Context) ([]interface{}, error)) *MockResourceHandler_List_Call {
	_c.Call.Return(run)
	return _c
}

// Priority provides a mock function with no fields
func (_m *MockResourceHandler) Priority() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Priority")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockResourceHandler_Priority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Priority'
type MockResourceHandler_Priority_Call struct {
	*mock.Call
}

// Priority is a helper method to define mock.On call
func (_e *MockResourceHandler_Expecter) Priority() *MockResourceHandler_Priority_Call {
	return &MockResourceHandler_Priority_Call{Call: _e.mock.On("Priority")}
}

func (_c *MockResourceHandler_Priority_Call) Run(run func()) *MockResourceHandler_Priority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockResourceHandler_Priority_Call) Return(_a0 int) *MockResourceHandler_Priority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockResourceHandler_Priority_Call) RunAndReturn(run func() int) *MockResourceHandler_Priority_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields: ctx, name
func (_m *MockResourceHandler) Status(ctx context.Context, name string) (types.ObjectStatus, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 types.ObjectStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ObjectStatus, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ObjectStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ObjectStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceHandler_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockResourceHandler_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockResourceHandler_Expecter) Status(ctx interface{}, name interface{}) *MockResourceHandler_Status_Call {
	return &MockResourceHandler_Status_Call{Call: _e.mock.On("Status", ctx, name)}
}

func (_c *MockResourceHandler_Status_Call) Run(run func(ctx context.Context, name string)) *MockResourceHandler_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceHandler_Status_Call) Return(_a0 types.ObjectStatus, _a1 error) *MockResourceHandler_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceHandler_Status_Call) RunAndReturn(run func(context.Context, string) (types.ObjectStatus, error)) *MockResourceHandler_Status_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForDeleted provides a mock function with given fields: ctx, name
func (_m *MockResourceHandler) WaitForDeleted(ctx context.Context, name string) (types.ObjectStatus, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for WaitForDeleted")
	}

	var r0 types.ObjectStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ObjectStatus, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ObjectStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ObjectStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceHandler_WaitForDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForDeleted'
type MockResourceHandler_WaitForDeleted_Call struct {
	*mock.Call
}

// WaitForDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockResourceHandler_Expecter) WaitForDeleted(ctx interface{}, name interface{}) *MockResourceHandler_WaitForDeleted_Call {
	return &MockResourceHandler_WaitForDeleted_Call{Call: _e.mock.On("WaitForDeleted", ctx, name)}
}

func (_c *MockResourceHandler_WaitForDeleted_Call) Run(run func(ctx context.Context, name string)) *MockResourceHandler_WaitForDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceHandler_WaitForDeleted_Call) Return(_a0 types.ObjectStatus, _a1 error) *MockResourceHandler_WaitForDeleted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceHandler_WaitForDeleted_Call) RunAndReturn(run func(context.Context, string) (types.ObjectStatus, error)) *MockResourceHandler_WaitForDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForReady provides a mock function with given fields: ctx, name
func (_m *MockResourceHandler) WaitForReady(ctx context.Context, name string) (types.ObjectStatus, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for WaitForReady")
	}

	var r0 types.ObjectStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ObjectStatus, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ObjectStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ObjectStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceHandler_WaitForReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForReady'
type MockResourceHandler_WaitForReady_Call struct {
	*mock.Call
}

// WaitForReady is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockResourceHandler_Expecter) WaitForReady(ctx interface{}, name interface{}) *MockResourceHandler_WaitForReady_Call {
	return &MockResourceHandler_WaitForReady_Call{Call: _e.mock.On("WaitForReady", ctx, name)}
}

func (_c *MockResourceHandler_WaitForReady_Call) Run(run func(ctx context.Context, name string)) *MockResourceHandler_WaitForReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockResourceHandler_WaitForReady_Call) Return(_a0 types.ObjectStatus, _a1 error) *MockResourceHandler_WaitForReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceHandler_WaitForReady_Call) RunAndReturn(run func(context.Context, string) (types.ObjectStatus, error)) *MockResourceHandler_WaitForReady_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceHandler creates a new instance of MockResourceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceHandler {
	mock := &MockResourceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
