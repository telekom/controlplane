// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "github.com/telekom/controlplane/rover-ctl/pkg/types"
)

// MockStatusHandler is an autogenerated mock type for the StatusHandler type
type MockStatusHandler struct {
	mock.Mock
}

type MockStatusHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStatusHandler) EXPECT() *MockStatusHandler_Expecter {
	return &MockStatusHandler_Expecter{mock: &_m.Mock}
}

// Status provides a mock function with given fields: ctx, name
func (_m *MockStatusHandler) Status(ctx context.Context, name string) (types.ObjectStatus, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 types.ObjectStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ObjectStatus, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ObjectStatus); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.ObjectStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStatusHandler_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockStatusHandler_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockStatusHandler_Expecter) Status(ctx interface{}, name interface{}) *MockStatusHandler_Status_Call {
	return &MockStatusHandler_Status_Call{Call: _e.mock.On("Status", ctx, name)}
}

func (_c *MockStatusHandler_Status_Call) Run(run func(ctx context.Context, name string)) *MockStatusHandler_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStatusHandler_Status_Call) Return(_a0 types.ObjectStatus, _a1 error) *MockStatusHandler_Status_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStatusHandler_Status_Call) RunAndReturn(run func(context.Context, string) (types.ObjectStatus, error)) *MockStatusHandler_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStatusHandler creates a new instance of MockStatusHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStatusHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStatusHandler {
	mock := &MockStatusHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
