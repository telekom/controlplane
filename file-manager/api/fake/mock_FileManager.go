// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.5. DO NOT EDIT.

package fake

import (
	context "context"

	api "github.com/telekom/controlplane/file-manager/api"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockFileManager is an autogenerated mock type for the FileManager type
type MockFileManager struct {
	mock.Mock
}

type MockFileManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileManager) EXPECT() *MockFileManager_Expecter {
	return &MockFileManager_Expecter{mock: &_m.Mock}
}

// DeleteFile provides a mock function with given fields: ctx, fileId
func (_m *MockFileManager) DeleteFile(ctx context.Context, fileId string) error {
	ret := _m.Called(ctx, fileId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileManager_DeleteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFile'
type MockFileManager_DeleteFile_Call struct {
	*mock.Call
}

// DeleteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
func (_e *MockFileManager_Expecter) DeleteFile(ctx interface{}, fileId interface{}) *MockFileManager_DeleteFile_Call {
	return &MockFileManager_DeleteFile_Call{Call: _e.mock.On("DeleteFile", ctx, fileId)}
}

func (_c *MockFileManager_DeleteFile_Call) Run(run func(ctx context.Context, fileId string)) *MockFileManager_DeleteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFileManager_DeleteFile_Call) Return(_a0 error) *MockFileManager_DeleteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileManager_DeleteFile_Call) RunAndReturn(run func(context.Context, string) error) *MockFileManager_DeleteFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadFile provides a mock function with given fields: ctx, fileId, w
func (_m *MockFileManager) DownloadFile(ctx context.Context, fileId string, w io.Writer) (*api.FileDownloadResponse, error) {
	ret := _m.Called(ctx, fileId, w)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 *api.FileDownloadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) (*api.FileDownloadResponse, error)); ok {
		return rf(ctx, fileId, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Writer) *api.FileDownloadResponse); ok {
		r0 = rf(ctx, fileId, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FileDownloadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Writer) error); ok {
		r1 = rf(ctx, fileId, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileManager_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type MockFileManager_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
//   - w io.Writer
func (_e *MockFileManager_Expecter) DownloadFile(ctx interface{}, fileId interface{}, w interface{}) *MockFileManager_DownloadFile_Call {
	return &MockFileManager_DownloadFile_Call{Call: _e.mock.On("DownloadFile", ctx, fileId, w)}
}

func (_c *MockFileManager_DownloadFile_Call) Run(run func(ctx context.Context, fileId string, w io.Writer)) *MockFileManager_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Writer))
	})
	return _c
}

func (_c *MockFileManager_DownloadFile_Call) Return(_a0 *api.FileDownloadResponse, _a1 error) *MockFileManager_DownloadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileManager_DownloadFile_Call) RunAndReturn(run func(context.Context, string, io.Writer) (*api.FileDownloadResponse, error)) *MockFileManager_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: ctx, fileId, fileContentType, r
func (_m *MockFileManager) UploadFile(ctx context.Context, fileId string, fileContentType string, r io.Reader) (*api.FileUploadResponse, error) {
	ret := _m.Called(ctx, fileId, fileContentType, r)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 *api.FileUploadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) (*api.FileUploadResponse, error)); ok {
		return rf(ctx, fileId, fileContentType, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) *api.FileUploadResponse); ok {
		r0 = rf(ctx, fileId, fileContentType, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.FileUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(ctx, fileId, fileContentType, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileManager_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockFileManager_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
//   - fileContentType string
//   - r io.Reader
func (_e *MockFileManager_Expecter) UploadFile(ctx interface{}, fileId interface{}, fileContentType interface{}, r interface{}) *MockFileManager_UploadFile_Call {
	return &MockFileManager_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, fileId, fileContentType, r)}
}

func (_c *MockFileManager_UploadFile_Call) Run(run func(ctx context.Context, fileId string, fileContentType string, r io.Reader)) *MockFileManager_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *MockFileManager_UploadFile_Call) Return(_a0 *api.FileUploadResponse, _a1 error) *MockFileManager_UploadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileManager_UploadFile_Call) RunAndReturn(run func(context.Context, string, string, io.Reader) (*api.FileUploadResponse, error)) *MockFileManager_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileManager creates a new instance of MockFileManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileManager {
	mock := &MockFileManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
