// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ApiProblem Based on https://www.rfc-editor.org/rfc/rfc9457.html
type ApiProblem struct {
	Detail   string  `json:"detail"`
	Instance *string `json:"instance,omitempty"`
	Status   int     `json:"status"`
	Title    string  `json:"title"`
	Type     string  `json:"type"`
}

// ErrorResponse Based on https://www.rfc-editor.org/rfc/rfc9457.html
type ErrorResponse = ApiProblem

// FileUploadResponse defines model for FileUploadResponse.
type FileUploadResponse struct {
	Id string `json:"id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Download a file
	// (GET /v1/files/{fileId})
	DownloadFile(c *fiber.Ctx, fileId string) error
	// Upload a file
	// (PUT /v1/files/{fileId})
	UploadFile(c *fiber.Ctx, fileId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", c.Params("fileId"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter fileId: %w", err).Error())
	}

	return siw.Handler.DownloadFile(c, fileId)
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", c.Params("fileId"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter fileId: %w", err).Error())
	}

	return siw.Handler.UploadFile(c, fileId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/v1/files/:fileId", wrapper.DownloadFile)

	router.Put(options.BaseURL+"/v1/files/:fileId", wrapper.UploadFile)

}

type ErrorResponseApplicationProblemPlusJSONResponse ApiProblem

type FileDownloadResponseApplicationoctetStreamResponse struct {
	Body io.Reader

	ContentLength int64
}

type FileUploadResponseJSONResponse struct {
	Id string `json:"id"`
}

type DownloadFileRequestObject struct {
	FileId string `json:"fileId"`
}

type DownloadFileResponseObject interface {
	VisitDownloadFileResponse(ctx *fiber.Ctx) error
}

type DownloadFile200ApplicationoctetStreamResponse struct {
	FileDownloadResponseApplicationoctetStreamResponse
}

func (response DownloadFile200ApplicationoctetStreamResponse) VisitDownloadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type DownloadFile400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response DownloadFile400ApplicationProblemPlusJSONResponse) VisitDownloadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DownloadFile500ApplicationProblemPlusJSONResponse ApiProblem

func (response DownloadFile500ApplicationProblemPlusJSONResponse) VisitDownloadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UploadFileRequestObject struct {
	FileId string `json:"fileId"`
	Body   io.Reader
}

type UploadFileResponseObject interface {
	VisitUploadFileResponse(ctx *fiber.Ctx) error
}

type UploadFile200JSONResponse struct{ FileUploadResponseJSONResponse }

func (response UploadFile200JSONResponse) VisitUploadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UploadFile400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response UploadFile400ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UploadFile500ApplicationProblemPlusJSONResponse ApiProblem

func (response UploadFile500ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Download a file
	// (GET /v1/files/{fileId})
	DownloadFile(ctx context.Context, request DownloadFileRequestObject) (DownloadFileResponseObject, error)
	// Upload a file
	// (PUT /v1/files/{fileId})
	UploadFile(ctx context.Context, request UploadFileRequestObject) (UploadFileResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DownloadFile operation middleware
func (sh *strictHandler) DownloadFile(ctx *fiber.Ctx, fileId string) error {
	var request DownloadFileRequestObject

	request.FileId = fileId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadFile(ctx.UserContext(), request.(DownloadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DownloadFileResponseObject); ok {
		if err := validResponse.VisitDownloadFileResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadFile operation middleware
func (sh *strictHandler) UploadFile(ctx *fiber.Ctx, fileId string) error {
	var request UploadFileRequestObject

	request.FileId = fileId

	request.Body = bytes.NewReader(ctx.Request().Body())

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFile(ctx.UserContext(), request.(UploadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadFileResponseObject); ok {
		if err := validResponse.VisitUploadFileResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWX4/bNgz/KgK3tzl2+g/r/LR0bYG8DMW1e+ruQSfRtjpb0ig6aXDwdx8k27nElzZD",
	"h2EPO+AShZTIH8kfRd2Dcp13Fi0HKO+B8M8eA79y2mASvDUt/uZbJ/XNqIpC5SyjTUvpfWuUZONs4RQj",
	"rwITyi7qgmqwk3FVOeokQwl3xko6QAZ88AglBCZjaxjiXwaEwTsbRs9viBzdTJKvePXk7lrsfvgUnD33",
	"+j1hBSV8VzzEWIzaUGy8eTcehORaY1BkfLQIJWytUDKgcJWQ9iAwQskENyYId/cJFQsTBCH3ZFHDkKU0",
	"vXZ7OybqKuZ/lKkl2Pe9UhhC1bdCTxAScFGZFsXecCO4QRE8KlMZ1MLoXIwgdXjQp90T3pDPQc21vxrS",
	"4/R7ch6JJyIZHT+XwWSJcYZQQ/kx7rk9Bjwm+krAvT8PNxe/OMvS2JBikiGY2o4hJ29T+SOUEwaU9wsP",
	"r2RALZwVDbMPZVHs9/ucKrVCbdhR7qguqFLx/6fnL37MG+5ayBYRa2Rp2gtRZ2BsYGkVXlQGltyHE5Wx",
	"jDVS1LHh9vKpUXAtw0l7dDHby2asl7NvbOXmykuVKo9dCg1YahN+ts7njC3+4bpcR3NWdtHIh83N6+17",
	"yKCnuHlOpsYdtjFTJ4cKeFTmjQim8+3EzE5aWSOJytFUdWNrIa0+kj7+jltDDhm0RuFE2AnMxkvVoHia",
	"r08SmTh+tL15t4UMdkhhRLDO1/kTyODzSnqzUpKxdnR4CGzIwHm00hso4Vm+zp9FEkhuUvWK3ZMi4Snu",
	"49dWD1FaIz/m2w0yGdxhmLu2IteNXYu0Q7rUxVudiw8NCqNFaFzfalG5tnX7tE05u0MbrcdkxFynLt1q",
	"KGG+p2LoCS/JDhkpQPlxCWybemu+HrKvehK/9+v1M4V2lxa4Wo2Cmlzvz0WMsjuXRPO/yg5HKUTSQZly",
	"+UCnMYtwymimHrOTO2fJ/tvFUHm6Xn9pMhz3FRcv8yGD53/n8PnYGjJ48Q2n4i3Qd51MZJuhTNyIXSvr",
	"WCw4YT7cDhn4/gK3xhv8yCx2/xavRkf/G1bND6XDl6t78pYqHj+khm/l5mIm/3fMHIE85uXxfobbNEBG",
	"sl1iwltHonVKtmIaCl18WiwHRtzRuMDly/XLNcT0T56W5t7skA7cxElAWEtKMyGwo3lWyPRyOE6KcxYE",
	"GLKlxY0VaLV3xnJsnem9YXG/NPAQ81Ujx1cafjaBL4A57evhdvgrAAD//4epQZKlCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
