// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiProblem Based on https://www.rfc-editor.org/rfc/rfc9457.html
type ApiProblem struct {
	Detail   string  `json:"detail"`
	Instance *string `json:"instance,omitempty"`
	Status   int     `json:"status"`
	Title    string  `json:"title"`
	Type     string  `json:"type"`
}

// ErrorResponse Based on https://www.rfc-editor.org/rfc/rfc9457.html
type ErrorResponse = ApiProblem

// FileUploadResponse defines model for FileUploadResponse.
type FileUploadResponse struct {
	Id string `json:"id"`
}

// UploadFileParams defines parameters for UploadFile.
type UploadFileParams struct {
	// XFileContentType Content type of the file (e.g., text/yaml, text/json) that will be stored as metadata
	XFileContentType *string `json:"X-File-Content-Type,omitempty"`

	// XFileChecksum Checksum of the file that will be stored as metadata
	XFileChecksum *string `json:"X-File-Checksum,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Download a file
	// (GET /v1/files/{fileId})
	DownloadFile(c *fiber.Ctx, fileId string) error
	// Upload a file
	// (PUT /v1/files/{fileId})
	UploadFile(c *fiber.Ctx, fileId string, params UploadFileParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// DownloadFile operation middleware
func (siw *ServerInterfaceWrapper) DownloadFile(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", c.Params("fileId"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter fileId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	return siw.Handler.DownloadFile(c, fileId)
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "fileId" -------------
	var fileId string

	err = runtime.BindStyledParameterWithOptions("simple", "fileId", c.Params("fileId"), &fileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter fileId: %w", err).Error())
	}

	c.Context().SetUserValue(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UploadFileParams

	headers := c.GetReqHeaders()

	// ------------- Optional header parameter "X-File-Content-Type" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-File-Content-Type")]; found {
		var XFileContentType string

		err = runtime.BindStyledParameterWithOptions("simple", "X-File-Content-Type", value[0], &XFileContentType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-File-Content-Type: %w", err).Error())
		}

		params.XFileContentType = &XFileContentType

	}

	// ------------- Optional header parameter "X-File-Checksum" -------------
	if value, found := headers[http.CanonicalHeaderKey("X-File-Checksum")]; found {
		var XFileChecksum string

		err = runtime.BindStyledParameterWithOptions("simple", "X-File-Checksum", value[0], &XFileChecksum, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter X-File-Checksum: %w", err).Error())
		}

		params.XFileChecksum = &XFileChecksum

	}

	return siw.Handler.UploadFile(c, fileId, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/v1/files/:fileId", wrapper.DownloadFile)

	router.Put(options.BaseURL+"/v1/files/:fileId", wrapper.UploadFile)

}

type ErrorResponseApplicationProblemPlusJSONResponse ApiProblem

type FileDownloadResponseResponseHeaders struct {
	XFileChecksum    string
	XFileContentType string
}
type FileDownloadResponseApplicationoctetStreamResponse struct {
	Body io.Reader

	Headers       FileDownloadResponseResponseHeaders
	ContentLength int64
}

type FileUploadResponseResponseHeaders struct {
	XFileChecksum    string
	XFileContentType string
}
type FileUploadResponseJSONResponse struct {
	Body struct {
		Id string `json:"id"`
	}

	Headers FileUploadResponseResponseHeaders
}

type DownloadFileRequestObject struct {
	FileId string `json:"fileId"`
}

type DownloadFileResponseObject interface {
	VisitDownloadFileResponse(ctx *fiber.Ctx) error
}

type DownloadFile200ApplicationoctetStreamResponse struct {
	FileDownloadResponseApplicationoctetStreamResponse
}

func (response DownloadFile200ApplicationoctetStreamResponse) VisitDownloadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("X-File-Checksum", fmt.Sprint(response.Headers.XFileChecksum))
	ctx.Response().Header.Set("X-File-Content-Type", fmt.Sprint(response.Headers.XFileContentType))
	ctx.Response().Header.Set("Content-Type", "application/octet-stream")
	if response.ContentLength != 0 {
		ctx.Response().Header.Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	ctx.Status(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(ctx.Response().BodyWriter(), response.Body)
	return err
}

type DownloadFile400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response DownloadFile400ApplicationProblemPlusJSONResponse) VisitDownloadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DownloadFile500ApplicationProblemPlusJSONResponse ApiProblem

func (response DownloadFile500ApplicationProblemPlusJSONResponse) VisitDownloadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type UploadFileRequestObject struct {
	FileId string `json:"fileId"`
	Params UploadFileParams
	Body   io.Reader
}

type UploadFileResponseObject interface {
	VisitUploadFileResponse(ctx *fiber.Ctx) error
}

type UploadFile200JSONResponse struct{ FileUploadResponseJSONResponse }

func (response UploadFile200JSONResponse) VisitUploadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("X-File-Checksum", fmt.Sprint(response.Headers.XFileChecksum))
	ctx.Response().Header.Set("X-File-Content-Type", fmt.Sprint(response.Headers.XFileContentType))
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response.Body)
}

type UploadFile400ApplicationProblemPlusJSONResponse struct {
	ErrorResponseApplicationProblemPlusJSONResponse
}

func (response UploadFile400ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type UploadFile500ApplicationProblemPlusJSONResponse ApiProblem

func (response UploadFile500ApplicationProblemPlusJSONResponse) VisitUploadFileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/problem+json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Download a file
	// (GET /v1/files/{fileId})
	DownloadFile(ctx context.Context, request DownloadFileRequestObject) (DownloadFileResponseObject, error)
	// Upload a file
	// (PUT /v1/files/{fileId})
	UploadFile(ctx context.Context, request UploadFileRequestObject) (UploadFileResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DownloadFile operation middleware
func (sh *strictHandler) DownloadFile(ctx *fiber.Ctx, fileId string) error {
	var request DownloadFileRequestObject

	request.FileId = fileId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DownloadFile(ctx.UserContext(), request.(DownloadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DownloadFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DownloadFileResponseObject); ok {
		if err := validResponse.VisitDownloadFileResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UploadFile operation middleware
func (sh *strictHandler) UploadFile(ctx *fiber.Ctx, fileId string, params UploadFileParams) error {
	var request UploadFileRequestObject

	request.FileId = fileId
	request.Params = params

	request.Body = bytes.NewReader(ctx.Request().Body())

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UploadFile(ctx.UserContext(), request.(UploadFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UploadFileResponseObject); ok {
		if err := validResponse.VisitUploadFileResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXX2/bNhD/KsRtDxsmS+4/rPPT3LUF3IehSDN0QOcHhjxJbCSSI092jEDffSAl2bKt",
	"JlmDAQMaILDEI+9+9+fHO92CMLU1GjV5WNyCw78b9PTKSIVx4a2q8A9bGS4vOlFYFEYT6vjIra2U4KSM",
	"zowgpJknh7wOMi9KrHl4yo2rOcECrpTmbgcJ0M4iLMCTU7qANvwl4NBbo31n+Y1zxl30K3dYtc5cVVj/",
	"9NkbfWz1e4c5LOC77OBj1kl9trTqfXcQommJXjhlg0ZYwEozwT0ykzOudwwDlIRRqTwzV59REFOeOaTG",
	"aZTQJjFMr81Wd4G6F/OjInUK9kMjBHqfNxWTPYQInOWqQrZVVDIqkXmLQuUKJVMyZR1I6Q/yuLvH61NI",
	"oEQu0cVc/DkLDs5+K1Fc+yZCPsYwSILhvTLumSfjgkXNaiQuOXFIRt6e+pbsLXU4Zpdxw5m1TsrC8Uda",
	"bPvkDTV+b+rOy8w6Y9FRTxglpx0LzFIOJSw+hT3rfWK7gronsY09TmvKQgy40j46z71Xhe5S++1krh3E",
	"0dMRo8/MvuIeJTOalUTWL7Jsu92mLhczlIqMS40rMpeL8P/L8xc/pyXVFSQnmZVIXFUTUBJQ2hPXAieF",
	"njg1fiRSmrBAF2SkqJo+RX387q6kKN2bGPQlA9aJKkvAo2icot2HELvOtSvkDt2yofLw9na4id59vITT",
	"0nz38ZK9itsYmWvUjDdUoqaeJUPiguVO2+EiCynoql3p3AxM4yIyDesYYiDupPK/amNTwgqvTZ3K4Jfm",
	"Uefl8uL16gMk0LiqVxmyKnGDVUjZ6FAGZ7xaMq9qW/WVV3PNC3QsN66nmdIF41rub9PwHrbGW7FSAvsb",
	"ogeztFyUyJ6m81FG46Wy1718v4IENuh8h2CeztMnkMDNjFs1E5ywMG53cKxNwFjU3CpYwLN0nj4L1cip",
	"jNnKNk+yiCe7DT8r2YbVAum88C+QnMIN+qEd5M7UXTtAt0E31R5WMmWXJTIlmS9NU0mWm6oy27hNGL0J",
	"eTY6BCPEOiZ8JWEBQwMMrke8jtdI8SL6dApsJcf0T+60xP5q5vNnAvUmPuBs1i0UzjT2eImQ18crQf3v",
	"vMZuFULVwSLG8lBOXRRhTC1yDd51+6xPppWn8/mXRo79vmxySmgTeP6Qw8fzUJvAi684NaJ/TMqY+J/W",
	"wSvf1DWPtTgg7UsnMJgXIZcwIgas2wRsM1F6XUfdFx6Z/6rsOkPfQtElD26nP2BapAkjvKFsx+uqfwzD",
	"y4+MSk5sq6qKXeHQdbkfd90It5siDoCnGvy/Qzs1ajwSzDDX3MvV4btm92XOjD59svPvnvZrGX8yWv5v",
	"+d7hPGf7vinCun2IwsjwKfq9NY5VRvCK9Y26DvP1aRMPO0rjafFy/nIOQWMP5FTdmw26HZWhOzsswsCg",
	"i1hBQ//mcXzed+9j6nk4L9ClZqilNSpQygxDt8btqYJDSO5Vsv8kwxvlaQLM+DJt1+0/AQAA//+Afiad",
	"kg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
