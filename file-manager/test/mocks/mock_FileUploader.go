// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockFileUploader is an autogenerated mock type for the FileUploader type
type MockFileUploader struct {
	mock.Mock
}

type MockFileUploader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileUploader) EXPECT() *MockFileUploader_Expecter {
	return &MockFileUploader_Expecter{mock: &_m.Mock}
}

// UploadFile provides a mock function with given fields: ctx, fileId, file, metadata
func (_m *MockFileUploader) UploadFile(ctx context.Context, fileId string, file io.Reader, metadata map[string]string) (string, error) {
	ret := _m.Called(ctx, fileId, file, metadata)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, map[string]string) (string, error)); ok {
		return rf(ctx, fileId, file, metadata)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, map[string]string) string); ok {
		r0 = rf(ctx, fileId, file, metadata)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, map[string]string) error); ok {
		r1 = rf(ctx, fileId, file, metadata)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileUploader_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type MockFileUploader_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
//   - file io.Reader
//   - metadata map[string]string
func (_e *MockFileUploader_Expecter) UploadFile(ctx interface{}, fileId interface{}, file interface{}, metadata interface{}) *MockFileUploader_UploadFile_Call {
	return &MockFileUploader_UploadFile_Call{Call: _e.mock.On("UploadFile", ctx, fileId, file, metadata)}
}

func (_c *MockFileUploader_UploadFile_Call) Run(run func(ctx context.Context, fileId string, file io.Reader, metadata map[string]string)) *MockFileUploader_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(io.Reader), args[3].(map[string]string))
	})
	return _c
}

func (_c *MockFileUploader_UploadFile_Call) Return(_a0 string, _a1 error) *MockFileUploader_UploadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileUploader_UploadFile_Call) RunAndReturn(run func(context.Context, string, io.Reader, map[string]string) (string, error)) *MockFileUploader_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileUploader creates a new instance of MockFileUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileUploader {
	mock := &MockFileUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
