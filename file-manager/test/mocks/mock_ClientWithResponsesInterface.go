// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	gen "github.com/telekom/controlplane/file-manager/api/gen"

	mock "github.com/stretchr/testify/mock"
)

// MockClientWithResponsesInterface is an autogenerated mock type for the ClientWithResponsesInterface type
type MockClientWithResponsesInterface struct {
	mock.Mock
}

type MockClientWithResponsesInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterface_Expecter {
	return &MockClientWithResponsesInterface_Expecter{mock: &_m.Mock}
}

// DownloadFileWithResponse provides a mock function with given fields: ctx, fileId, reqEditors
func (_m *MockClientWithResponsesInterface) DownloadFileWithResponse(ctx context.Context, fileId string, reqEditors ...gen.RequestEditorFn) (*gen.DownloadFileResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fileId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFileWithResponse")
	}

	var r0 *gen.DownloadFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...gen.RequestEditorFn) (*gen.DownloadFileResponse, error)); ok {
		return rf(ctx, fileId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...gen.RequestEditorFn) *gen.DownloadFileResponse); ok {
		r0 = rf(ctx, fileId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.DownloadFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...gen.RequestEditorFn) error); ok {
		r1 = rf(ctx, fileId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_DownloadFileWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFileWithResponse'
type MockClientWithResponsesInterface_DownloadFileWithResponse_Call struct {
	*mock.Call
}

// DownloadFileWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
//   - reqEditors ...gen.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) DownloadFileWithResponse(ctx interface{}, fileId interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_DownloadFileWithResponse_Call {
	return &MockClientWithResponsesInterface_DownloadFileWithResponse_Call{Call: _e.mock.On("DownloadFileWithResponse",
		append([]interface{}{ctx, fileId}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_DownloadFileWithResponse_Call) Run(run func(ctx context.Context, fileId string, reqEditors ...gen.RequestEditorFn)) *MockClientWithResponsesInterface_DownloadFileWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gen.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(gen.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_DownloadFileWithResponse_Call) Return(_a0 *gen.DownloadFileResponse, _a1 error) *MockClientWithResponsesInterface_DownloadFileWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_DownloadFileWithResponse_Call) RunAndReturn(run func(context.Context, string, ...gen.RequestEditorFn) (*gen.DownloadFileResponse, error)) *MockClientWithResponsesInterface_DownloadFileWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFileWithBodyWithResponse provides a mock function with given fields: ctx, fileId, params, contentType, body, reqEditors
func (_m *MockClientWithResponsesInterface) UploadFileWithBodyWithResponse(ctx context.Context, fileId string, params *gen.UploadFileParams, contentType string, body io.Reader, reqEditors ...gen.RequestEditorFn) (*gen.UploadFileResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, fileId, params, contentType, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UploadFileWithBodyWithResponse")
	}

	var r0 *gen.UploadFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gen.UploadFileParams, string, io.Reader, ...gen.RequestEditorFn) (*gen.UploadFileResponse, error)); ok {
		return rf(ctx, fileId, params, contentType, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gen.UploadFileParams, string, io.Reader, ...gen.RequestEditorFn) *gen.UploadFileResponse); ok {
		r0 = rf(ctx, fileId, params, contentType, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gen.UploadFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gen.UploadFileParams, string, io.Reader, ...gen.RequestEditorFn) error); ok {
		r1 = rf(ctx, fileId, params, contentType, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFileWithBodyWithResponse'
type MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call struct {
	*mock.Call
}

// UploadFileWithBodyWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
//   - params *gen.UploadFileParams
//   - contentType string
//   - body io.Reader
//   - reqEditors ...gen.RequestEditorFn
func (_e *MockClientWithResponsesInterface_Expecter) UploadFileWithBodyWithResponse(ctx interface{}, fileId interface{}, params interface{}, contentType interface{}, body interface{}, reqEditors ...interface{}) *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call {
	return &MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call{Call: _e.mock.On("UploadFileWithBodyWithResponse",
		append([]interface{}{ctx, fileId, params, contentType, body}, reqEditors...)...)}
}

func (_c *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call) Run(run func(ctx context.Context, fileId string, params *gen.UploadFileParams, contentType string, body io.Reader, reqEditors ...gen.RequestEditorFn)) *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]gen.RequestEditorFn, len(args)-5)
		for i, a := range args[5:] {
			if a != nil {
				variadicArgs[i] = a.(gen.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(*gen.UploadFileParams), args[3].(string), args[4].(io.Reader), variadicArgs...)
	})
	return _c
}

func (_c *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call) Return(_a0 *gen.UploadFileResponse, _a1 error) *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call) RunAndReturn(run func(context.Context, string, *gen.UploadFileParams, string, io.Reader, ...gen.RequestEditorFn) (*gen.UploadFileResponse, error)) *MockClientWithResponsesInterface_UploadFileWithBodyWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientWithResponsesInterface creates a new instance of MockClientWithResponsesInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientWithResponsesInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
