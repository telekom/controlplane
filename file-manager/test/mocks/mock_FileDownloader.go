// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockFileDownloader is an autogenerated mock type for the FileDownloader type
type MockFileDownloader struct {
	mock.Mock
}

type MockFileDownloader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileDownloader) EXPECT() *MockFileDownloader_Expecter {
	return &MockFileDownloader_Expecter{mock: &_m.Mock}
}

// DownloadFile provides a mock function with given fields: ctx, fileId
func (_m *MockFileDownloader) DownloadFile(ctx context.Context, fileId string) (io.Reader, map[string]string, error) {
	ret := _m.Called(ctx, fileId)

	if len(ret) == 0 {
		panic("no return value specified for DownloadFile")
	}

	var r0 io.Reader
	var r1 map[string]string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.Reader, map[string]string, error)); ok {
		return rf(ctx, fileId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.Reader); ok {
		r0 = rf(ctx, fileId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) map[string]string); ok {
		r1 = rf(ctx, fileId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, fileId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFileDownloader_DownloadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadFile'
type MockFileDownloader_DownloadFile_Call struct {
	*mock.Call
}

// DownloadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - fileId string
func (_e *MockFileDownloader_Expecter) DownloadFile(ctx interface{}, fileId interface{}) *MockFileDownloader_DownloadFile_Call {
	return &MockFileDownloader_DownloadFile_Call{Call: _e.mock.On("DownloadFile", ctx, fileId)}
}

func (_c *MockFileDownloader_DownloadFile_Call) Run(run func(ctx context.Context, fileId string)) *MockFileDownloader_DownloadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFileDownloader_DownloadFile_Call) Return(_a0 io.Reader, _a1 map[string]string, _a2 error) *MockFileDownloader_DownloadFile_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFileDownloader_DownloadFile_Call) RunAndReturn(run func(context.Context, string) (io.Reader, map[string]string, error)) *MockFileDownloader_DownloadFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileDownloader creates a new instance of MockFileDownloader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileDownloader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileDownloader {
	mock := &MockFileDownloader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
