// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockCollectionInterface is an autogenerated mock type for the CollectionInterface type
type MockCollectionInterface struct {
	mock.Mock
}

type MockCollectionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollectionInterface) EXPECT() *MockCollectionInterface_Expecter {
	return &MockCollectionInterface_Expecter{mock: &_m.Mock}
}

// RecordCacheHit provides a mock function with no fields
func (_m *MockCollectionInterface) RecordCacheHit() {
	_m.Called()
}

// MockCollectionInterface_RecordCacheHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordCacheHit'
type MockCollectionInterface_RecordCacheHit_Call struct {
	*mock.Call
}

// RecordCacheHit is a helper method to define mock.On call
func (_e *MockCollectionInterface_Expecter) RecordCacheHit() *MockCollectionInterface_RecordCacheHit_Call {
	return &MockCollectionInterface_RecordCacheHit_Call{Call: _e.mock.On("RecordCacheHit")}
}

func (_c *MockCollectionInterface_RecordCacheHit_Call) Run(run func()) *MockCollectionInterface_RecordCacheHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCollectionInterface_RecordCacheHit_Call) Return() *MockCollectionInterface_RecordCacheHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionInterface_RecordCacheHit_Call) RunAndReturn(run func()) *MockCollectionInterface_RecordCacheHit_Call {
	_c.Run(run)
	return _c
}

// RecordCacheMiss provides a mock function with given fields: reason
func (_m *MockCollectionInterface) RecordCacheMiss(reason string) {
	_m.Called(reason)
}

// MockCollectionInterface_RecordCacheMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordCacheMiss'
type MockCollectionInterface_RecordCacheMiss_Call struct {
	*mock.Call
}

// RecordCacheMiss is a helper method to define mock.On call
//   - reason string
func (_e *MockCollectionInterface_Expecter) RecordCacheMiss(reason interface{}) *MockCollectionInterface_RecordCacheMiss_Call {
	return &MockCollectionInterface_RecordCacheMiss_Call{Call: _e.mock.On("RecordCacheMiss", reason)}
}

func (_c *MockCollectionInterface_RecordCacheMiss_Call) Run(run func(reason string)) *MockCollectionInterface_RecordCacheMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCollectionInterface_RecordCacheMiss_Call) Return() *MockCollectionInterface_RecordCacheMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCollectionInterface_RecordCacheMiss_Call) RunAndReturn(run func(string)) *MockCollectionInterface_RecordCacheMiss_Call {
	_c.Run(run)
	return _c
}

// NewMockCollectionInterface creates a new instance of MockCollectionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollectionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollectionInterface {
	mock := &MockCollectionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
