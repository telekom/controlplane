// Copyright 2025 Deutsche Telekom IT GmbH
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockSecretId is an autogenerated mock type for the SecretId type
type MockSecretId struct {
	mock.Mock
}

type MockSecretId_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecretId) EXPECT() *MockSecretId_Expecter {
	return &MockSecretId_Expecter{mock: &_m.Mock}
}

// Env provides a mock function with no fields
func (_m *MockSecretId) Env() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Env")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecretId_Env_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Env'
type MockSecretId_Env_Call struct {
	*mock.Call
}

// Env is a helper method to define mock.On call
func (_e *MockSecretId_Expecter) Env() *MockSecretId_Env_Call {
	return &MockSecretId_Env_Call{Call: _e.mock.On("Env")}
}

func (_c *MockSecretId_Env_Call) Run(run func()) *MockSecretId_Env_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretId_Env_Call) Return(_a0 string) *MockSecretId_Env_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretId_Env_Call) RunAndReturn(run func() string) *MockSecretId_Env_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with no fields
func (_m *MockSecretId) Path() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Path")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecretId_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockSecretId_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockSecretId_Expecter) Path() *MockSecretId_Path_Call {
	return &MockSecretId_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockSecretId_Path_Call) Run(run func()) *MockSecretId_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretId_Path_Call) Return(_a0 string) *MockSecretId_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretId_Path_Call) RunAndReturn(run func() string) *MockSecretId_Path_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockSecretId) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecretId_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockSecretId_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockSecretId_Expecter) String() *MockSecretId_String_Call {
	return &MockSecretId_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockSecretId_String_Call) Run(run func()) *MockSecretId_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretId_String_Call) Return(_a0 string) *MockSecretId_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretId_String_Call) RunAndReturn(run func() string) *MockSecretId_String_Call {
	_c.Call.Return(run)
	return _c
}

// SubPath provides a mock function with no fields
func (_m *MockSecretId) SubPath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SubPath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSecretId_SubPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubPath'
type MockSecretId_SubPath_Call struct {
	*mock.Call
}

// SubPath is a helper method to define mock.On call
func (_e *MockSecretId_Expecter) SubPath() *MockSecretId_SubPath_Call {
	return &MockSecretId_SubPath_Call{Call: _e.mock.On("SubPath")}
}

func (_c *MockSecretId_SubPath_Call) Run(run func()) *MockSecretId_SubPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSecretId_SubPath_Call) Return(_a0 string) *MockSecretId_SubPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSecretId_SubPath_Call) RunAndReturn(run func() string) *MockSecretId_SubPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSecretId creates a new instance of MockSecretId. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecretId(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecretId {
	mock := &MockSecretId{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
